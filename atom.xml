<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tianyao&#39; s BLOG</title>
  
  <subtitle>Tianyao</subtitle>
  <link href="https://atffang.github.io/atom.xml" rel="self"/>
  
  <link href="https://atffang.github.io/"/>
  <updated>2025-08-29T03:57:39.933Z</updated>
  <id>https://atffang.github.io/</id>
  
  <author>
    <name>Fang Tianyao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于AIS数据进行船舶轨迹合成的一点思路</title>
    <link href="https://atffang.github.io/2025/08/29/%E5%9F%BA%E4%BA%8EAIS%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E8%88%B9%E8%88%B6%E8%BD%A8%E8%BF%B9%E5%88%86%E6%AE%B5%E5%90%88%E6%88%90%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%B7%AF/"/>
    <id>https://atffang.github.io/2025/08/29/%E5%9F%BA%E4%BA%8EAIS%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E8%88%B9%E8%88%B6%E8%BD%A8%E8%BF%B9%E5%88%86%E6%AE%B5%E5%90%88%E6%88%90%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%B7%AF/</id>
    <published>2025-08-29T02:33:07.000Z</published>
    <updated>2025-08-29T03:57:39.933Z</updated>
    
    <content type="html"><![CDATA[<p>介绍一下本科毕设里关于基于AIS数据进行船舶轨迹合成部分的一点思路，非专业，仅分享</p><span id="more"></span><h3 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h3><p>契机是我一位老师最近中了关于海运的面上，突然想起我本科毕业论文做的也是相关的数据分析。当然只是一点很简单的工作，毕竟只是本科的毕业设计。</p><h3 id="ais数据获取"><a class="markdownIt-Anchor" href="#ais数据获取"></a> AIS数据获取</h3><p>自动识别系统（Automatic Identification System，AIS）是安装在船舶上的一套自动追踪系统，通过岸基或星基设备接收船舶唯一标识符号、坐标、类型以及航行状态等数据，并且由连续的船舶AIS数据可合成船舶轨迹。</p><p>第一步数据获取就卡了很久。定毕设题目那会儿，即2023年冬天，有幸参加了第一届的信息地理学大会，听了三四个关于AIS数据和船舶轨迹分析的报告，都有提到他们获取的AIS数据，一些研究人员手里一年的数据量都是十亿级别的，让我有种莫名的错觉，觉得获取局部一段时间内的AIS数据并不是什么难事。<br /><img src="https://atffang.github.io/2025/08/29/基于AIS数据进行船舶轨迹合成的一点思路/001.jpg"/><br /><img src="https://atffang.github.io/2025/08/29/基于AIS数据进行船舶轨迹合成的一点思路/002.jpg"/><br />事实证明，我想的太简单了。先是尝试寻找开源数据未果，开始咨询数据供应商。但是这些商业公司的服务对象一般是船运相关企业和少量的科研人员，对我这样的个体户，上千上万的起步价尚且不能接受，何况数据需求在起步价内无法满足。兜兜转转十天，终于让我找到了活菩萨网站<a href="https://datalastic.com/">https://datalastic.com/</a></p><p>其实他们的定价同样贵的离谱，月订阅费用高达数千欧元，但他提供了一个几十欧元的一周体验计划，我没有犹豫就买了这根救命稻草。有了api一切都好说，唯一的问题是其相关API只能请求一个坐标特定范围内的AIS数据，这给数据获取的策略与后期数据合成都增加了不小的难度。我只能先将研究区域划分为几十个圆，在获取这些圆心范围内的数据。大概爬取了3-4天后，从datalastic网站获取了区域内AIS记录72,9499条，包含船舶的uuid（唯一标识符）、mmsi、坐标以及速度等有效信息，并汇总数据集包含的船舶，获取了每条船舶的国籍、类型、排水量等信息，具体下表所示。</p><table><thead><tr><th>AIS记录字段</th><th>AIS记录字段含义</th><th><strong>船舶信息字段</strong></th><th><strong>船舶信息字段含义</strong></th></tr></thead><tbody><tr><td>uuid</td><td>通用唯一识别码</td><td>uuid</td><td>通用唯一识别码</td></tr><tr><td>lat</td><td>纬度（度）</td><td>name</td><td>名称</td></tr><tr><td>lon</td><td>经度（度）</td><td>mmsi</td><td>海事服务身份码</td></tr><tr><td>speed</td><td>速度（节）</td><td>imo</td><td>国际海事组织号码</td></tr><tr><td>course</td><td>航向</td><td>country_iso</td><td>注册国代码</td></tr><tr><td>heading</td><td>船首向</td><td>type</td><td>类型</td></tr><tr><td>destination</td><td>目的地</td><td>gross_tonnage</td><td>总吨位</td></tr><tr><td>last_pos_epoch</td><td>时间戳</td><td>deadweight</td><td>最大载运量</td></tr><tr><td>last_pos_utc</td><td>时间戳（世界时间）</td><td>length</td><td>船体长度</td></tr><tr><td></td><td></td><td>speed_max</td><td>最大航速（节）</td></tr><tr><td>navstat</td><td>导航状态</td><td>home_port</td><td>注册港</td></tr><tr><td>distance_nm</td><td>距目的地距离（海里）</td><td>year_built</td><td>建造年份</td></tr><tr><td></td><td></td><td>breadth</td><td>船体宽度</td></tr><tr><td>大概分布如下图：</td><td></td><td></td><td></td></tr><tr><td><img src="https://atffang.github.io/2025/08/29/基于AIS数据进行船舶轨迹合成的一点思路/003.jpg"/></td><td></td><td></td><td></td></tr><tr><td>将其注入数据库，并通过uuid字段与船舶信息数据库建立连接。</td><td></td><td></td><td></td></tr></tbody></table><h3 id="船舶轨迹合成"><a class="markdownIt-Anchor" href="#船舶轨迹合成"></a> 船舶轨迹合成</h3><p>由于用于合成船舶轨迹的AIS记录时间跨度较长，绝大多数船舶在区域内并不仅完成了一次航行任务，而是涵盖了多条航线。因此，通过AIS记录直接合成的船舶轨迹存在航迹复杂、重复等问题。为了更好地获得航行特征，研究将轨迹从港口出发，直至到达另一港口的航段定义为船舶的一条分段轨迹。而在给定的时间内，可能无法捕捉到一些船舶的起始港口或终点港口，因此被起始时间或终止时间截断的轨迹，也被称为该船舶的一条分段轨迹。</p><p>因此，通过AIS记录合成分段轨迹的前提是区分船舶的状态，即航行状态或驻留状态。在某一船舶的一组根据时间排序的AIS记录中，有四种可能的分段轨迹：</p><ul><li>由该组数据最早的AIS记录点开始，至下一个处于驻留状态的AIS记录点结束的分段轨迹。</li><li>由该组数据最早的AIS记录点开始，至该组数据最晚的AIS记录点结束的分段轨迹。</li><li>该组某个处于驻留状态，且下一个记录点处于航行状态的AIS记录点开始，至下一个处于驻留状态的AIS记录点结束的分段轨迹。</li><li>该组某个处于驻留状态，且下一个记录点处于航行状态的AIS记录点开始，至该组数据最晚的AIS记录点结束的分段轨迹。<br /><img src="https://atffang.github.io/2025/08/29/基于AIS数据进行船舶轨迹合成的一点思路/004.jpg"/><br />上图展示了通过判断某一船舶AIS记录点航行状态，从而合成船舶分段轨迹的步骤。虽然AIS记录提供了导航状态字段，用以判断船舶是否处于航行状态，但该字段存在大量数据缺失、错误问题。此外，研究认为，虽然在港口附近的上传的AIS记录点显示船舶处于航行状态，但该船舶的实际行为多表现为停留或在较小的范围内徘徊，因此应当被归类为驻留。因此，AIS记录的导航状态字段并不能提供准确的判别依据，研究采用支持向量机（Support Vector Machine, 下文简称SVM）方法判定AIS记录点的状态。</li></ul><p>SVM是一种可以有效处理分类问题的机器学习算法，目标是在数据集中找到一个最优的决策边界（亦称为超平面），这个决策边界能够以最大间隔分开不同类别的数据点。</p><p>由于SVM是一种监督分类方法，因此，研究手动标注了2000个AIS数据点的航行状态，并使用坐标、航速、航向以及船首向作为特征向量，使用70%的标注数据集作为训练集训练SVM模型，同时通过比较剩下30%的数据构成的测试集检测各个核函数的区分效果，包括线性核函数、多项式核函数、径向基函数核以及Sigmoid核函数，并确定了最佳核函数。<br /><img src="https://atffang.github.io/2025/08/29/基于AIS数据进行船舶轨迹合成的一点思路/005.jpg"/><br />从图中可以看出，船舶驻留记录点多聚集于海岸港口，与实际情况相符。然而，由于模型仍存在一些误差，可能将一些处于航行状态的AIS记录点被识别为驻留状态，而一些处于驻留状态的航行点被识别为航行状态，导致原本连续的航行AIS记录被打断，导致船舶的分段轨迹错误地在该节点上分裂，或是从船舶驻留在港口及周边区域时识别出多余轨迹。因此，研究需要识别并修正这些错误的状态点。研究使用一个大小为3x1的滑动窗口遍历按时间排序的船舶状态记录点，如果窗口内第一个状态记录与第三个状态记录相同，但第二个状态记录与前后都不同，则修正该记录。</p><p>在完成数据修正后，即可合成船舶轨迹,即分段的坐标时间序列。图中©展示了某船舶的AIS记录分段轨迹合成，在合成过程中，研究删除了船舶状态为驻留的记录，并连接连续的船舶状态为航行的记录，完成了一段完整轨迹的分割。使用该方法完成2023年9月27日至10月6日，以及10月10日至10月19日区域的全部AIS记录分段轨迹合成，其效果如下图所示。<br /><img src="https://atffang.github.io/2025/08/29/基于AIS数据进行船舶轨迹合成的一点思路/006.jpg"/></p><h3 id="船舶轨迹压缩"><a class="markdownIt-Anchor" href="#船舶轨迹压缩"></a> 船舶轨迹压缩</h3><p>Douglas-Peucker算法（以下简称DP算法）是一种用于曲线近似和抽稀的算法。它的主要思想是在给定的曲线中，通过保留一些重要的数据点，来近似表示原始曲线，从而实现曲线的简化。由于研究提供的轨迹数据集数据量较大，轨迹节点较多，因此在轨迹聚类前，对轨迹数据集进行压缩处理能够有效提高聚类效率，而大量实验证明，DP算法适用于轨迹数据的压缩。下图展示了DP算法对于一条轨迹压缩的过程。<br /><img src="https://atffang.github.io/2025/08/29/基于AIS数据进行船舶轨迹合成的一点思路/007.jpg"/><br />DP算法的基本思路如下：</p><ul><li>在目标曲线的起点和终点之间，找到一条直线，作为曲线的初始近似。</li><li>计算其他所有点到该直线的距离，找到距离最大的点（即垂直距离最大的点）。</li><li>如果这个最大距离超过了预先设定的阈值（即所谓的抽稀阈值），则将该点加入到结果集合中，并将曲线划分为两个子曲线。</li><li>对两个子曲线分别递归地应用上述过程，直到所有点都被处理完毕。</li><li></li></ul><p>通过这个过程，DP算法可以在一定程度上保留曲线的形状特征，同时减少数据点的数量，从而实现曲线的简化。DP算法的阈值决定了简化后的曲线与原始曲线之间的最大允许误差，是影响算法压缩结果的唯一参数。</p><p>Zhao等人的实验]表明，对于统一阈值压缩而言，在以一个固定的步长增加阈值的过程中，使用轨迹节点数变化率相对较低、较为平稳的一定范围内的阈值，对相似度量性能有一定程度的提升，他们称该范围为“稳定阶段”。为此，研究计算了0-1000米阈值范围内，以10米为步长的轨迹平均节点数负增长率以及轨迹平均长度负增长率，得到数据集的6个“稳定阶段”，如下图所示。<br /><img src="https://atffang.github.io/2025/08/29/基于AIS数据进行船舶轨迹合成的一点思路/008.jpg"/><br />为了尽可能保全轨迹结构，研究选取了处于第一个稳定阶段的压缩阈值350m。在该阈值下，经压缩，数据集中每条轨迹的平均节点数减少至原来的44%，但平均轨迹长度仍保持在原来的98%，这说明该压缩算法在大幅度减少轨迹节点数量的同时，较好地保存了轨迹原有的形态特征。</p><h3 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h3><p>上述的AIS数据获取-分段轨迹合成-轨迹压缩构成是当时毕业设计的数据预处理部分，后续继续进行了聚类、分析等操作，这部分以后有机会再讲吧。现在回看我的毕业设计的后续部分也是稀奇古怪的，譬如修改DTW距离计算方式来消除长度导致的相关性，用一堆概率分布拟合计算最优聚类参数等等，现在觉得似乎不够严谨，但也不太清楚有什么更好的改进方法，看来水平没有进步。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍一下本科毕设里关于基于AIS数据进行船舶轨迹合成部分的一点思路，非专业，仅分享&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>实验室安全检测系统</title>
    <link href="https://atffang.github.io/2025/07/19/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E5%AE%89%E5%85%A8%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/"/>
    <id>https://atffang.github.io/2025/07/19/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E5%AE%89%E5%85%A8%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/</id>
    <published>2025-07-19T02:25:37.000Z</published>
    <updated>2025-07-19T08:39:55.980Z</updated>
    
    <content type="html"><![CDATA[<p>最近参与了一个横向，项目架构与基础代码大概稳定下来了，浅浅记录一下。</p><span id="more"></span><h3 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h3><p>实际上这个项目在技术上并不难，甚至比许多工作简单的多，但让人头疼的主要是三点：</p><ul><li>典型小作坊做派，前端、数据库、识别系统、模型全要做，没有明确的职责分工</li><li>内网开发，测试也很困难，每天要骑个电瓶车去update</li><li>需求含混不清，一会说用这个一会说用那个，为此接入数据的逻辑改了n遍</li></ul><h3 id="系统需求与架构"><a class="markdownIt-Anchor" href="#系统需求与架构"></a> 系统需求与架构</h3><p>领导需要一个接入监控系统，实施监测各个实验室实验人员操作规范性，并归纳总结的系统，现在已在接入了一百余个监控设备，后续将推广至一千余个设备，其大致架构如下图所示：<br /><img src="https://atffang.github.io/2025/07/19/实验室安全检测系统/架构.png"/><br />按照该架构，重点的内容为监控轮询与帧识别两部分，程序将以设定的轮询间隔依次通过厂商提供的SDK访问摄像头并截图，将截图与包括摄像头基础信息、时间等的元数据交予消息队列并分发给多个识别设备进行图像识别。在试运行版本中，整个体系都在一台一张gpu的设备上运行。图像识别完成后，将识别结果汇总后存入数据库中。</p><h3 id="任务模型训练"><a class="markdownIt-Anchor" href="#任务模型训练"></a> 任务模型训练</h3><p>甲方提出了识别实验室实验人员不穿白大褂、夜间单人做实验、消防通道占用、废液桶是否盖盖子、通风橱开启是否规范等等。这些需求有的可以直接调用YOLO模型，有的则需要自行训练模型。</p><p>以<strong>实验人员穿着</strong>为例，首先基于YOLOv11模型提取多张监控截图中的人物边框并裁减，使用自己设计的标注工具进行是否穿着实验服装的正负样本标注，约两千余张。使用该数据，基于<strong>MobileNetV2</strong>模型训练我们需求的分类模型。</p><p><strong>MobileNetV2</strong> 是 Google 在 2018 年提出的一种轻量级卷积神经网络架构，我们将其迁移至我们的任务上。具体任务流程与要点如下：</p><ol><li>按照8：2划分数据集</li><li>加载 ImageNet 上预训练好的权重</li><li>将MobileNetV2 的最后一层 <code>nn.Sequential</code>替换为输出 2 类</li><li>任务采用交叉熵损失函数， Adam优化器，训练 epochs=10, batchsize=32, lr=1e-4<br />最终，分类模型的Accuracy为0.9850，达到了预期需求。</li></ol><p>整体模型首先使用yolo11s识别人，置信阈值设置为0.4，随后使用自己训练的二分类模型进行是否穿白大褂的判别，在后续的测试中，发现其基本可以满足需求，但仍对穿着白色T恤的实验人员有漏检情况，需要后续对模型进行改进。</p><h3 id="producer模块设计"><a class="markdownIt-Anchor" href="#producer模块设计"></a> Producer模块设计</h3><p>读取数据库中当日需要访问的摄像头的id，基于摄像头厂商提供的监控rtsp视频流Python SDK，轮询摄像头获取rtsp url。一开始使用opencv链接流并截取帧，但是截取效率和内存占用都很不理想，后来就直接改用了<strong>ffmpeg</strong>截取，在处理速度和内存占用上都优化了许多。</p><p>由于仍存在一定的等待时间，采用线程池提交任务，大概逻辑如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用线程池提交任务</span></span><br><span class="line"><span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">4</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    futures = [executor.submit(ffmpeg_cut, *task) <span class="keyword">for</span> task <span class="keyword">in</span> tasks]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> concurrent.futures.as_completed(futures):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = future.result() </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Task raised an exception: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>在截取完成图像后，保存至本地并将元数据加入消息队列。</p><h3 id="消息队列设计"><a class="markdownIt-Anchor" href="#消息队列设计"></a> 消息队列设计</h3><p>在单机任务中，任务队列由Python维护，设计一个PhotoMessage类如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhotoMessage</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        photo_id: 帧的唯一标识符（默认使用 UUID）</span></span><br><span class="line"><span class="string">camera_id: 摄像头的标识符</span></span><br><span class="line"><span class="string">room_id: 物理位置的标识符</span></span><br><span class="line"><span class="string">photo_path: 帧在文件系统中的路径或内存引用</span></span><br><span class="line"><span class="string">timestamp: 帧的捕获时间（如果未提供则自动生成）</span></span><br><span class="line"><span class="string">metadata: 附加的处理上下文信息（如模型输出等）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    camera_id: <span class="built_in">str</span></span><br><span class="line">    room_id: <span class="built_in">str</span></span><br><span class="line">    photo_path: Path</span><br><span class="line">    photo_id: <span class="built_in">str</span> = field(default_factory=<span class="keyword">lambda</span>: <span class="built_in">str</span>(uuid.uuid4()))</span><br><span class="line">    timestamp: datetime = field(default_factory=datetime.now)</span><br><span class="line">    metadata: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>] = field(default_factory=<span class="built_in">dict</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_json</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="comment"># ……</span></span><br></pre></td></tr></table></figure><p>其中，有如 photo_id 是运行时生成一个唯一值（不能提前固定成某个默认字符串）。如果你写 photo_id: str = str(uuid.uuid4())，那么所有对象都会默认用<strong>同一个 UUID</strong>（因为默认值只会在类定义时求一次值）。而default_factory 会在每次创建对象时调用 lambda 生成新的值。在 dataclass 中，<strong>凡是带副作用的默认值（当前时间、UUID、列表、字典等）都应使用 default_factory</strong>，否则会引发不可预测的行为或共享状态。</p><p>为了表示队列，设计一个GlobalMessageQueue类如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GlobalMessageQueue</span>():</span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> cls._instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls._instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">            cls._instance._queue = queue.LifoQueue(maxsize=<span class="number">10000</span>)</span><br><span class="line">            cls._instance._persist_file = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put_message</span>(<span class="params">self, msg: PhotoMessage</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        存入消息到队列</span></span><br><span class="line"><span class="string">        :param msg: PhotoMessage实例</span></span><br><span class="line"><span class="string">        :return: 是否成功入队</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._queue.put_nowait(msg)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> queue.Full:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;WARNING: 消息队列已满，丢弃最早的消息&quot;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self._queue.get_nowait()  <span class="comment"># 丢弃最旧消息</span></span><br><span class="line">                self._queue.put_nowait(msg)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">except</span> queue.Empty:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_message</span>(<span class="params">self</span>) -&gt; <span class="type">Optional</span>[PhotoMessage]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        非阻塞获取消息</span></span><br><span class="line"><span class="string">        :return: PhotoMessage实例或None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self._queue.get_nowait()</span><br><span class="line">        <span class="keyword">except</span> queue.Empty:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">persist_messages</span>(<span class="params">self, file_path: Path</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        持久化队列到磁盘</span></span><br><span class="line"><span class="string">        :param file_path: 存储文件路径</span></span><br><span class="line"><span class="string">        :return: 持久化的消息数量</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># ……</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_messages</span>(<span class="params">self, file_path: Path</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        从磁盘加载消息到队列</span></span><br><span class="line"><span class="string">        :param file_path: 存储文件路径</span></span><br><span class="line"><span class="string">        :return: 加载的消息数量</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># ……</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_persist_file</span>(<span class="params">self, file_path: Path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;设置自动持久化文件路径&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># ……</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;析构时自动持久化&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># ……</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取当前队列的大小</span></span><br><span class="line"><span class="string">        :return: 队列中消息的数量</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># ……</span></span><br></pre></td></tr></table></figure><p>该类 GlobalMessageQueue 实现了线程安全的<strong>全局单例消息队列</strong>，使用 LifoQueue 存储 PhotoMessage 实例，支持消息的入队、出队、磁盘持久化和加载，并在对象销毁时自动保存队列内容，防止数据丢失。</p><p>当然，在多设备并行处理中，可使用Redis作为多设备共享的消息队列。</p><h3 id="consumer模块设计"><a class="markdownIt-Anchor" href="#consumer模块设计"></a> Consumer模块设计</h3><p>首先，我们定义一个父类BaseModel，规范了模型对于图像输入的预处理方式。配置从指定config中读取，规范模型的名称、权重文件位置、预处理方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BaseModel</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, config: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]</span>):</span><br><span class="line">        self.device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">        self.name = config[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">        self.preprocess = config[<span class="string">&quot;preprocess&quot;</span>]</span><br><span class="line">        self.pipeline = config[<span class="string">&quot;pipeline&quot;</span>]</span><br><span class="line"></span><br><span class="line">        self._build_preprocess_method()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 预处理类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_build_preprocess_method</span>(<span class="params">self</span>):</span><br><span class="line">        preprocess = self.preprocess</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">preprocess_image</span>(<span class="params">self, message: PhotoMessage</span>):</span><br><span class="line">            <span class="comment"># 调用_crop和_resize的逻辑</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> image</span><br><span class="line">        </span><br><span class="line">        self.preprocess_image = MethodType(preprocess_image, self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_crop</span>(<span class="params">self, message: PhotoMessage, image: Image.Image</span>):</span><br><span class="line">        <span class="comment"># ……</span></span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_resize</span>(<span class="params">self, message: PhotoMessage, image: Image.Image</span>):</span><br><span class="line">        <span class="keyword">return</span> image.resize(self.preprocess[<span class="string">&quot;size&quot;</span>])</span><br></pre></td></tr></table></figure><p>随后继承该类，定义一个IdentificationModel子类，新增一个_loadmodel功能，需要返回一个predict方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IdentificationModel</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, config: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(config)</span><br><span class="line">        self.predict = self._loadmodel()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_loadmodel</span>(<span class="params">self</span>):</span><br><span class="line">        predict = ModelLoader.loader(self.name, self.pipeline, self.device)</span><br><span class="line">        <span class="keyword">return</span> predict</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><p>由于当前模型都暂时只需要一个predict方法，因此，暂时只使用该子类。可以注意到，IdentificationModel类使用了一个ModelLoader类，该类负责每个具体的识别模型的predict逻辑，返回每个模型中我们需要的predict函数，由于过于冗长，不做展示。</p><p>基于上述类，consumer线程可以很轻松的从配置文件中加载模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.modellist = []</span><br><span class="line"><span class="keyword">for</span> config <span class="keyword">in</span> config_list:</span><br><span class="line">    self.modellist.append(IdentificationModel(config))</span><br></pre></td></tr></table></figure><p>并逐个调用模型对图片进行识别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> self.modellist:                </span><br><span class="line">    photo = model.preprocess_image(message)</span><br><span class="line">    output = model.predict(message, photo)</span><br></pre></td></tr></table></figure><p>当然，在consumer内部也采用了多线程的设计，此处不再赘述。</p><h3 id="存储模块设计"><a class="markdownIt-Anchor" href="#存储模块设计"></a> 存储模块设计</h3><p>存储模块负责将识别结果整理后存入Postgresql数据库，识别结果图片存入Minio桶容器，之间通过唯一的uuid相关联，此处不多赘述。</p><h3 id="容器化部署"><a class="markdownIt-Anchor" href="#容器化部署"></a> 容器化部署</h3><p>由于本项目涉及到深度学习环境以及redis、minio、psql等工具，因此，使用docker部署是最快速最安全的方式。但是这里有个大坑！我原本基于dockerfile构建了带cuda驱动、nvcc、python环境以及ffmpeg等的容器，但是发现，由于windows上的docker是机遇wsl实现的，和本机之间存在网络的隔离，在容器内运行的python程序读不到局域网下的rtsp流。本人当即表示烦。<br />无奈，只能暂时线把主要程序放在宿主机上执行，redis、minio、psql使用docker部署。该项目的docker-compose如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">labsecurity_redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">labsecurity_minio</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9001:9001&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MINIO_ROOT_USER:</span> <span class="string">minioadmin</span></span><br><span class="line">      <span class="attr">MINIO_ROOT_PASSWORD:</span> <span class="string">minioadmin</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">server</span> <span class="string">/data</span> <span class="string">--console-address</span> <span class="string">&quot;:9001&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio_data:/data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio-init:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/mc</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      /bin/sh -c &quot;</span></span><br><span class="line"><span class="string">      sleep 5;</span></span><br><span class="line"><span class="string">      mc alias set local http://minio:9000 minioadmin minioadmin;</span></span><br><span class="line"><span class="string">      mc mb -p local/detection-results;</span></span><br><span class="line"><span class="string">      mc policy set public local/detection-results;</span></span><br><span class="line"><span class="string">      exit 0;</span></span><br><span class="line"><span class="string">      &quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:17</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">labsecurity_postgres</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">labcamera</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">postgres</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5434:5432&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./initdb:/docker-entrypoint-initdb.d</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">pgdata:</span></span><br><span class="line">  <span class="attr">minio_data:</span></span><br></pre></td></tr></table></figure><p>其中，在labsecurity_postgres容器中，我指定了数据库初始化的文件位置，即/initdb，只要在该文件夹下放置.sql，容器初始化时即可根据该sql文件建立数据库，不要太方便。而容器间、宿主机和容器间也可以通过端口相互访问，例如，在其他容器内通过<code>minio:9000</code>，在本机中可以通过<code>http://localhost:9001/</code>访问。</p><p>通过 <code>docker compose up -d</code> 可以一键部署容器，通过 <code>docker ps` -a</code> 查看部署情况。此外，按照原计划，深度学习环境也会部署在容器内，这里做个记录，首先，构建 .Dockerfile:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nvidia/cuda:<span class="number">12.8</span>.<span class="number">0</span>-cudnn-runtime-ubuntu22.<span class="number">04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y python3 python3-pip</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install torch==2.6.0 torchvision==0.21.0 torchaudio==2.6.0 --index-url https://download.pytorch.org/whl/cu126</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./app /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;main.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>可以看到，该文件指定了安装cuda驱动和python，并根据requirements安装好需要的python包。在docker- compose中加上：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span>  </span><br><span class="line">    <span class="attr">runtime:</span> <span class="string">nvidia</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">labsecurity_app</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./app:/app</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/app</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8888:8888&quot;</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;tail&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;/dev/null&quot;</span>]</span><br></pre></td></tr></table></figure><p>容器能看到本机的 <code>./app</code> 目录，点击vscode左下方的&gt;&lt;，选择Attach to Running Container，进入python容器，就可以愉快的开发了。</p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>这算是我参与的算是比较完整的横向了，但是也没什么好总结的，懒得总结。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近参与了一个横向，项目架构与基础代码大概稳定下来了，浅浅记录一下。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>从0开始学java 03 ：观察者模式</title>
    <link href="https://atffang.github.io/2025/07/09/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6java3/"/>
    <id>https://atffang.github.io/2025/07/09/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6java3/</id>
    <published>2025-07-09T08:24:45.000Z</published>
    <updated>2025-07-09T08:26:01.376Z</updated>
    
    <content type="html"><![CDATA[<p>生活所迫呀。</p><span id="more"></span><p><strong>观察者模式</strong>是一种行为型设计模式，它定义了一种<strong>对象之间一对多的依赖关系</strong>，使得当一个对象的状态发生改变时，所有依赖它的对象都会自动收到通知并更新。</p><p>为什么要用观察者模式？我们有下面几个原因：</p><ul><li><strong>解耦通知逻辑</strong>：观察者模式的核心价值在于：<strong>发布者（被观察者）和订阅者（观察者）之间是解耦的</strong>。  发布者无需知道观察者是谁、做什么，只需要在状态发生变化时“通知大家”；观察者则只关心“是否订阅了该对象”，无需知道发布者的具体业务逻辑。</li><li><strong>自动通知，避免轮询</strong>：在没有观察者模式的情况下，我们可能需要让每个组件不断检查（轮询）状态的变化。这不仅效率低，还容易写出重复、混乱的代码。</li><li><strong>事件驱动架构的基础</strong>：现代前后端框架（如 React、Vue、Java Swing、Spring）中大量使用观察者模式或其变种（发布-订阅模式）来构建响应式系统。</li></ul><h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3><p>我们还是以实际的需求入手，举一个最经典的例子：</p><p>你正在开发一个气象站系统，它能实时监测温度、湿度、气压等数据。现在有多个布告板（显示面板）希望<strong>自动接收到最新的天气数据并显示</strong>，比如：</p><ul><li>当前天气布告板（CurrentConditionsDisplay）</li><li>统计布告板（StatisticsDisplay）</li><li>预报布告板（ForecastDisplay）<br />一旦气象站更新数据，<strong>所有布告板都应立即更新并展示最新信息</strong>。</li></ul><p>首先，我们需要定义一个被观察者接口<strong>Subject</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer o)</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer o)</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其规范了三项功能：</p><ul><li>注册观察者</li><li>删除观察者</li><li>通知所有的观察者</li></ul><p>当然，我们也需要定义布告板观察者接口<strong>Observer</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">float</span> temp, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>额外的，我们定义一个展示接口<strong>DisplayElement</strong>，当布告板需要显示时，调用方法<strong>display()</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DisplayElement</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义完接口后，我们需要定义类来实现主题了。首先，定义一个实现<strong>被观察者</strong>接口<strong>Subject</strong>的类<strong>WeatherData</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherData</span> <span class="keyword">implements</span> <span class="title class_">Subject</span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> ArrayList observers;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> temperature;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> humidity;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> pressure;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeatherData</span><span class="params">()</span>&#123;  </span><br><span class="line">        observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer o)</span>&#123;  </span><br><span class="line">        observers.add(o);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer o)</span>&#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> observers.indexOf(o);  </span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>)&#123;  </span><br><span class="line">            observers.remove(i);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;observers.size(); i++)&#123;  </span><br><span class="line">            <span class="type">Observer</span> <span class="variable">observer</span> <span class="operator">=</span> (Observer) observers.get(i);  </span><br><span class="line">            observer.update(temperature, humidity, pressure);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 一旦新数据来了，调用此方法  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMeasurements</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;  </span><br><span class="line">        <span class="built_in">this</span>.humidity = humidity;  </span><br><span class="line">        <span class="built_in">this</span>.pressure = pressure;  </span><br><span class="line">        notifyObservers();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后，定义<strong>布告板（观察者）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>, DisplayElement &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CurrentConditionsDisplay</span><span class="params">(Subject weatherData)</span> &#123;</span><br><span class="line">        weatherData.registerObserver(<span class="built_in">this</span>); <span class="comment">// 注册自己</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">        <span class="built_in">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前天气：温度 = &quot;</span> + temperature + <span class="string">&quot;°C，湿度 = &quot;</span> + humidity + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下这个程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherStation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WeatherData</span> <span class="variable">weatherData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeatherData</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">CurrentConditionsDisplay</span> <span class="variable">currentDisplay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CurrentConditionsDisplay</span>(weatherData);</span><br><span class="line"></span><br><span class="line">        weatherData.setMeasurements(<span class="number">30.4f</span>, <span class="number">65.2f</span>, <span class="number">1013.1f</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">28.9f</span>, <span class="number">70.1f</span>, <span class="number">1012.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java内置写法"><a class="markdownIt-Anchor" href="#java内置写法"></a> java内置写法</h3><p>Java 在早期（JDK 1.0）就内置了对观察者模式的支持：</p><ul><li><code>java.util.Observable</code>：被观察者（Subject）</li><li><code>java.util.Observer</code>：观察者（Observer）</li></ul><p>还是使用上面气象站的例子，首先，我们继承内置的类<strong>Observable</strong>定义一个<strong>被观察者（WeatherData）</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Observable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherData</span> <span class="keyword">extends</span> <span class="title class_">Observable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMeasurements</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">        <span class="built_in">this</span>.humidity = humidity;</span><br><span class="line">        <span class="built_in">this</span>.pressure = pressure;</span><br><span class="line"></span><br><span class="line">        setChanged(); <span class="comment">// 标记状态已更新</span></span><br><span class="line">        notifyObservers(); <span class="comment">// 通知所有观察者（无参数版本）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getTemperature</span><span class="params">()</span> &#123; <span class="keyword">return</span> temperature; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getHumidity</span><span class="params">()</span> &#123; <span class="keyword">return</span> humidity; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getPressure</span><span class="params">()</span> &#123; <span class="keyword">return</span> pressure; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setChanged()</code>是 <code>Observable</code> 提供的方法，<strong>必须调用</strong>这个方法，告诉系统“我准备好通知别人了”。如果不调用 <code>setChanged()</code>，后续的 <code>notifyObservers()</code> 什么都不会发生。<br /><code>notifyObservers()</code>：遍历当前注册的所有观察者（通过 <code>addObserver()</code> 添加的），并依次调用它们的 <code>update()</code> 方法。默认参数为 <code>null</code>，也可以使用 <code>notifyObservers(Object arg)</code> 传递数据。</p><p>随后，继承内置类<strong>Observer</strong>定义一个<strong>观察者（布告板）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Observer;</span><br><span class="line"><span class="keyword">import</span> java.util.Observable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Observable o, Object arg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> WeatherData) &#123;</span><br><span class="line">            <span class="type">WeatherData</span> <span class="variable">wd</span> <span class="operator">=</span> (WeatherData) o;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前天气：温度 = &quot;</span> + wd.getTemperature() + <span class="string">&quot;°C，湿度 = &quot;</span> + wd.getHumidity() + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>update(Observable o, Object arg)</code>： 当被观察者调用 <code>notifyObservers()</code> 时，<strong>每个注册的观察者的 <code>update()</code> 方法都会被执行</strong>。参数 <code>o</code> 是被观察者对象本身（即 <code>WeatherData</code>）。参数 <code>arg</code> 是通过 <code>notifyObservers(arg)</code> 传递的附加数据（如果调用的是 <code>notifyObservers()</code>，则为 <code>null</code>）。</p><p>注册观察者、更新数据、触发通知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherStation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WeatherData</span> <span class="variable">weatherData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeatherData</span>();  <span class="comment">// 创建被观察者</span></span><br><span class="line">        <span class="type">CurrentConditionsDisplay</span> <span class="variable">display</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CurrentConditionsDisplay</span>(); <span class="comment">// 创建观察者</span></span><br><span class="line"></span><br><span class="line">        weatherData.addObserver(display);  <span class="comment">// 注册观察者到被观察者内部列表</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟一次天气数据更新</span></span><br><span class="line">        weatherData.setMeasurements(<span class="number">25.6f</span>, <span class="number">65.0f</span>, <span class="number">1012.0f</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然 Java 提供了这个内置机制，但它有一些明显缺陷，因此在 JDK 9 后已标记为过时（Deprecated）。 缺点如下：</p><ul><li><code>Observable</code> 是一个类，不是接口，<strong>限制了继承</strong>（Java 不支持多继承）</li><li>内部方法如 <code>setChanged()</code> 并非自动调用，容易遗漏</li><li><code>update()</code> 方法传参设计不灵活</li><li>不支持泛型</li></ul><p>因此，实际上用我们一开始写的方式自定义 <code>Subject</code> 和 <code>Observer</code> 接口是最清晰和通用的方式。哈哈。<br />当我们在大型项目中，面临越来越复杂的模块通信、异步响应、数据流处理需求时，传统的观察者模式（无论是自定义接口还是 Java 原生的 <code>Observer/Observable</code>）都可能显得不够灵活、不够强大，可能需要涉及到事件驱动架构（EDA）或响应式编程，在后面的章节中，我们会讲到。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;生活所迫呀。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>进程守护</title>
    <link href="https://atffang.github.io/2025/07/08/%E8%BF%9B%E7%A8%8B%E5%AE%88%E6%8A%A4/"/>
    <id>https://atffang.github.io/2025/07/08/%E8%BF%9B%E7%A8%8B%E5%AE%88%E6%8A%A4/</id>
    <published>2025-07-08T07:34:03.000Z</published>
    <updated>2025-07-08T11:28:56.028Z</updated>
    
    <content type="html"><![CDATA[<p>持久化的python服务</p><span id="more"></span><p><strong>进程守护</strong>指的是让一个程序<strong>在后台持续运行</strong>，<strong>具有自我恢复能力</strong>（崩溃自动重启），<strong>随系统启动自动启动</strong>，并可通过命令进行控制。</p><h3 id="1-linux下systemd-持久守护-python-程序"><a class="markdownIt-Anchor" href="#1-linux下systemd-持久守护-python-程序"></a> 1. linux下systemd 持久守护 Python 程序</h3><p>创建systemd服务配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/myscript.service</span><br></pre></td></tr></table></figure><p>内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=My Persistent Python Script</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/python3 /home/user/run_my_job.py</span><br><span class="line">WorkingDirectory=/home/user</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">User=your_linux_username</span><br><span class="line">StandardOutput=append:/var/log/myscript.log</span><br><span class="line">StandardError=append:/var/log/myscript.err</span><br><span class="line">Environment=PYTHONUNBUFFERED=1</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>启用并启动服务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reexec</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl enable myscript.service</span><br><span class="line">sudo systemctl start myscript.service</span><br></pre></td></tr></table></figure><p>查看日志和状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status myscript.service</span><br><span class="line">sudo <span class="built_in">tail</span> -f /var/log/myscript.log</span><br></pre></td></tr></table></figure><p>通过命令进行控制：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop myscript.service</span><br><span class="line">sudo systemctl restart myscript.service</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> myscript.service</span><br></pre></td></tr></table></figure><h3 id="2-跨平台python进程管理工具supervisord"><a class="markdownIt-Anchor" href="#2-跨平台python进程管理工具supervisord"></a> 2. 跨平台python进程管理工具supervisord</h3><p><strong>supervisord</strong> 是一个用 Python 编写的进程管理工具， 它可以监控、启动、停止、重启你python脚本在内的进程。可以直接利用pip下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure><p>Supervisor 由两个核心组件组成：</p><ul><li>supervisord守护进程：负责读取配置、启动/监控任务</li><li>supervisorctl命令行客户端：用于查看状态、重启任务等</li></ul><p>使用时，首先生成一个默认的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo_supervisord_conf &gt; supervisord.conf</span><br></pre></td></tr></table></figure><p>将需要守护的进程添加到配置文件中：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[program:my_script]</span></span><br><span class="line"><span class="attr">command</span>=python3 /home/user/scripts/my_script.py</span><br><span class="line"><span class="attr">directory</span>=/home/user/scripts</span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">5</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/var/log/my_script.out.log</span><br><span class="line"><span class="attr">stderr_logfile</span>=/var/log/my_script.err.log</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>command</td><td>要执行的命令</td></tr><tr><td>directory</td><td>工作目录</td></tr><tr><td>autostart</td><td>启动 supervisord 时自动启动</td></tr><tr><td>autorestart</td><td>异常退出后是否自动重启</td></tr><tr><td>startsecs</td><td>启动后运行多少秒才算成功</td></tr><tr><td>stdout_logfile</td><td>标准输出日志路径</td></tr><tr><td>stderr_logfile</td><td>错误日志路径</td></tr><tr><td>启动supervisord守护进程：</td><td></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c supervisord.conf</span><br></pre></td></tr></table></figure><p>和systemd一样，supervisord也有一些管理任务的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl -c supervisord.conf status</span><br><span class="line">supervisorctl -c supervisord.conf restart my_script</span><br><span class="line">supervisorctl -c supervisord.conf stop my_script</span><br></pre></td></tr></table></figure><p>也可以利用supervisord进行不同gpu任务分发，不同gpu上运行不同进程并守护的骚操作，首先，在你的模型任务代码中加上通过参数指定gpu的逻辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--gpu&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">f&quot;cuda:<span class="subst">&#123;args.gpu&#125;</span>&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">model.to(device)</span><br></pre></td></tr></table></figure><p>然后，指定不同的gpu进行进程守护：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[program:worker1]</span><br><span class="line"><span class="built_in">command</span>=python3 /opt/scripts/train_model.py --gpu 0</span><br><span class="line"></span><br><span class="line">[program:worker2]</span><br><span class="line"><span class="built_in">command</span>=python3 /opt/scripts/train_model.py --gpu 1</span><br></pre></td></tr></table></figure><h3 id="3-docker-restart-policy"><a class="markdownIt-Anchor" href="#3-docker-restart-policy"></a> 3. Docker + restart policy</h3><p>Docker 提供了一种机制叫做 restart policy（重启策略），用来控制当容器退出或系统重启时，是否自动重启该容器。<br />对于一个Dockerfile，可以加上 --restart always运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my-capture .</span><br><span class="line">docker run -d --name my_capture_container --restart always my-capture</span><br></pre></td></tr></table></figure><p>这个容器中的 Python 脚本崩溃时自动重启。</p><p>当然，在docker-compose.yml 中可以这样配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">camera_worker:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs:/app/logs</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br></pre></td></tr></table></figure><p>当然，如果想要在linux中开机自启动容器，除了上面的，只要再使得docker自动启动即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>这个命令会把 Docker 服务注册到 systemd 中，下次系统启动时会自动启动 Docker 服务, 也就自动拉起了 --restart always 的容器。</p><p>设置完之后，你可以检查一下重启策略是否配置好：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect your_container_name | grep -i restart</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;持久化的python服务&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>浅试docker：为 AI 项目构建高可维护的开发环境</title>
    <link href="https://atffang.github.io/2025/06/30/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%BB%B4%E6%8A%A4%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://atffang.github.io/2025/06/30/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%BB%B4%E6%8A%A4%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</id>
    <published>2025-06-30T12:49:55.000Z</published>
    <updated>2025-06-30T13:14:28.909Z</updated>
    
    <content type="html"><![CDATA[<p>浅试docker：为 AI 项目构建高可维护的开发环境</p><span id="more"></span><p>我的需求是一个带cuda驱动的python容器，redis容器、psql容器、minio容器，因此，我指定docker-compose和dockerfile，他们之间的区别如下表：</p><table><thead><tr><th>方面</th><th>Dockerfile</th><th>Docker Compose</th></tr></thead><tbody><tr><td>核心作用</td><td>定义单个镜像的构建过程，描述从基础镜像开始，安装软件、拷贝文件、配置环境等步骤，生成自定义镜像。</td><td>定义多个容器的编排和运行，指定哪些镜像或 Dockerfile 要启动，容器之间如何连接、挂载卷、端口映射等。</td></tr><tr><td>工作方式</td><td>通过 docker build 从 Dockerfile 构建镜像。</td><td>通过 docker-compose up 根据配置启动一个或多个容器。</td></tr><tr><td>是否拉取镜像</td><td>可以基于已有镜像（FROM xxx），也可以从头开始构建。</td><td>可以使用已有镜像（image: xxx）或基于 Dockerfile 构建镜像（build: xxx）。</td></tr><tr><td>功能范围</td><td>只负责镜像构建（静态），镜像里包含运行环境和文件。</td><td>负责多容器应用的启动与管理（动态），包括网络、依赖关系、环境变量等。</td></tr><tr><td>示例</td><td>写一个 Python 镜像，安装依赖，拷贝代码。</td><td>启动数据库、缓存、Python 服务容器，并让它们协同工作。</td></tr></tbody></table><p>编写<strong>Docker-compose:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span>  </span><br><span class="line">    <span class="attr">runtime:</span> <span class="string">nvidia</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">labsecurity_app</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./app:/app</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/app</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8888:8888&quot;</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;tail&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;/dev/null&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">labsecurity_redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">labsecurity_minio</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9001:9001&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MINIO_ROOT_USER:</span> <span class="string">minioadmin</span></span><br><span class="line">      <span class="attr">MINIO_ROOT_PASSWORD:</span> <span class="string">minioadmin</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">server</span> <span class="string">/data</span> <span class="string">--console-address</span> <span class="string">&quot;:9001&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio_data:/data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:17</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">labsecurity_postgres</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">labdb</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">labuser</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">labpass</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5432:5432&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pgdata:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">pgdata:</span></span><br><span class="line">  <span class="attr">minio_data:</span></span><br></pre></td></tr></table></figure><p>编写<strong>Dockerfile:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nvidia<span class="operator">/</span>cuda:<span class="number">12.8</span><span class="number">.0</span><span class="operator">-</span>cudnn<span class="operator">-</span>runtime<span class="operator">-</span>ubuntu22<span class="number">.04</span></span><br><span class="line"></span><br><span class="line">RUN apt<span class="operator">-</span><span class="keyword">get</span> <span class="keyword">update</span> <span class="operator">&amp;&amp;</span> apt<span class="operator">-</span><span class="keyword">get</span> install <span class="operator">-</span>y python3 python3<span class="operator">-</span>pip</span><br><span class="line"></span><br><span class="line">WORKDIR <span class="operator">/</span>app</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span> requirements.txt .</span><br><span class="line"></span><br><span class="line">RUN pip install torch<span class="operator">=</span><span class="operator">=</span><span class="number">2.6</span><span class="number">.0</span> torchvision<span class="operator">=</span><span class="operator">=</span><span class="number">0.21</span><span class="number">.0</span> torchaudio<span class="operator">=</span><span class="operator">=</span><span class="number">2.6</span><span class="number">.0</span> <span class="comment">--index-url https://download.pytorch.org/whl/cu126</span></span><br><span class="line">RUN pip install <span class="comment">--no-cache-dir -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span> .<span class="operator">/</span>app <span class="operator">/</span>app</span><br><span class="line"></span><br><span class="line">CMD [&quot;python3&quot;, &quot;main.py&quot;]</span><br></pre></td></tr></table></figure><p>例如，在python中通过<code>minio:9000</code>，在本机中可以通过<code>http://localhost:9001/</code>访问。</p><h3 id="docker快速构建"><a class="markdownIt-Anchor" href="#docker快速构建"></a> docker快速构建</h3><ol><li>下载docker desktop，对于分盘的windows电脑，建议迁移一下docker位置</li><li>换源，我这里修改配置文件为：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;gc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;defaultKeepStorage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20GB&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://docker.xuanyuan.me&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>构建镜像：<code>docker compose build</code></p></li><li><p>启动容器服务：<code>docker compose up -d</code> 没有下载过dockert-compose中的容器的会先下载</p></li><li><p>查看服务状态：<code>docker ps</code> -a<br /><img src="https://gcnaq17oc64n.feishu.cn/space/api/box/stream/download/asynccode/?code=NGI2NTJlZWU1OTExOGMzODgwMjAzZTM1NGJiMjhkNWNfZnA5ZE9tZHlwdWdhT3BOZjVtcVhzckd2Uk9Ma2pwdVRfVG9rZW46T2hBc2JGaHRHbzAyMEV4ZjAwZWMzSFYxbkloXzE3NTEyODkwNzk6MTc1MTI5MjY3OV9WNA" alt="" /></p></li><li><p>进入python容器：<code>docker exec -it labsecurity_app bash</code></p></li><li><p>测试一下cuda环境是否可用，运行脚本：</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())</span><br><span class="line"><span class="built_in">print</span>(torch.cuda.get_device_name(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><ol start="8"><li>结束所有服务： <code>docker-compose stop</code> 开始所有服务：<code>docker-compose start</code></li><li>我在docker-compose里面挂载了：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volumes:</span><br><span class="line">    - ./app:/app</span><br></pre></td></tr></table></figure><p>容器能看到本机的 <code>./app</code> 目录，点击vscode左下方的&gt;&lt;，选择Attach to Running Container，进入python容器，就可以愉快的开发了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;浅试docker：为 AI 项目构建高可维护的开发环境&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>从0开始学java 02 ：委托与策略模式</title>
    <link href="https://atffang.github.io/2025/06/29/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6java2/"/>
    <id>https://atffang.github.io/2025/06/29/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6java2/</id>
    <published>2025-06-29T07:46:42.000Z</published>
    <updated>2025-06-29T08:44:50.335Z</updated>
    
    <content type="html"><![CDATA[<p>生活所迫呀。</p><span id="more"></span><p>上一期中，我们通过接口（interface）和抽象类（abstract class）理解了如何定义行为规范、如何实现多态等等。然而，在传统的继承方式中，子类通过覆盖方法来改变行为，但这种方式在面对行为切换、行为复用时显得僵硬。因此，我们希望有一种方式，不用继承，也能改变对象的行为，更适合“插件式”的行为结构。</p><p>这个时候，就需要一种新的模式<strong>委托</strong>，把行为交给另一个对象来完成。</p><p>首先，我们需要先定义一个接口，来规范要干的事情</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FlyBehavior</span>&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现接口的类必须要实现fly这一个动作，我们定义一个实现FlyBehavior接口的类FlyWithWings，来实现有翅膀可以飞的动作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyWithWings</span> <span class="keyword">implements</span> <span class="title class_">FlyBehavior</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;fly!!!!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再定义一个实现FlyBehavior接口的类FlyNoWings，来实现没翅膀不能飞的动作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyNoWings</span> <span class="keyword">implements</span> <span class="title class_">FlyBehavior</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;cannot fly!!!!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义玩接口和接口的实现之后，我们定义了两个飞行动作，现在，我们来定义实现飞行动作的对象。<br />我们定义一个鸭子抽象类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Duck</span>&#123;</span><br><span class="line"><span class="comment">// 声明引用变量</span></span><br><span class="line">FlyBehavior flyBehavior;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Duck</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类的函数，子类必须实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 委托给行为类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performFly</span><span class="params">()</span> &#123;</span><br><span class="line">flyBehavior.fly();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里首先声明了一个FlyBehavior类型的引用变量，表示鸭子的飞行行为，当调用performFly()时，实际上调用的是flyBehavior对象的fly()方法。</p><p>好的，那么我们可以新建一个子类了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MallardDuck</span> <span class="keyword">extends</span> <span class="title class_">Duck</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MallardDuck</span><span class="params">()</span>&#123;</span><br><span class="line">flyBehavior = <span class="keyword">new</span> <span class="title class_">FlyNoWings</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;im MallardDuck&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 MallardDuck 构造函数里，给继承自父类的 flyBehavior 变量赋值为 new FlyWithWings() 实例。这样调用 performFly() 就会调用 FlyWithWings 类的 fly() 方法，实现“飞”的动作。<br />入口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunDuck</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Duck</span> <span class="variable">mallard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MallardDuck</span>();</span><br><span class="line">mallard.performFly();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出： cannot fly!!!</p><p><strong>但是</strong>，这样还是不够灵活，我们还想要让鸭子具有动态行为。为了实现这个目的，我们只需要在抽象类中加入一个设定方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Duck</span>&#123;</span><br><span class="line">FlyBehavior flyBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Duck</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performFly</span><span class="params">()</span> &#123;</span><br><span class="line">flyBehavior.fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新加入的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlyBehavior</span><span class="params">(FlyBehavior fb)</span>&#123;</span><br><span class="line">flyBehavior = fb;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后，在实现时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunDuck</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Duck</span> <span class="variable">mallard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MallardDuck</span>();</span><br><span class="line">mallard.performFly();</span><br><span class="line">mallard.setFlyBehavior(<span class="keyword">new</span> <span class="title class_">FlyWithWings</span>());</span><br><span class="line">mallard.performFly();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即可动态设定其行为，输出为：<br />cannot fly!!!<br />fly!!!</p><p><strong>这种通过组合行为接口的方式实现动态切换行为的设计模式，称为策略模式（Strategy Pattern），是面向对象设计中的重要思想</strong>。<br /><img src="https://atffang.github.io/2025/06/29/从0开始学java2/策略模式.png"/></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;生活所迫呀。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>美团商业分析精英大赛亚军</title>
    <link href="https://atffang.github.io/2025/06/25/%E7%BE%8E%E5%9B%A2%E5%95%86%E4%B8%9A%E5%88%86%E6%9E%90%E7%B2%BE%E8%8B%B1%E5%A4%A7%E8%B5%9B%E4%BA%9A%E5%86%9B/"/>
    <id>https://atffang.github.io/2025/06/25/%E7%BE%8E%E5%9B%A2%E5%95%86%E4%B8%9A%E5%88%86%E6%9E%90%E7%B2%BE%E8%8B%B1%E5%A4%A7%E8%B5%9B%E4%BA%9A%E5%86%9B/</id>
    <published>2025-06-25T01:29:59.000Z</published>
    <updated>2025-06-25T02:13:11.955Z</updated>
    
    <content type="html"><![CDATA[<p>一起聚——面向聚餐场景的智能餐厅推荐系统</p><span id="more"></span><p>从1206支队伍里杀到了第二，获此殊荣确实在我们意料之外。感谢美团提供的机会与money。<br /><img src="https://atffang.github.io/2025/06/25/美团商业分析精英大赛亚军/决赛-终稿2.5_01.png"/><br /><img src="https://atffang.github.io/2025/06/25/美团商业分析精英大赛亚军/决赛-终稿2.5_02.png"/><br /><img src="https://atffang.github.io/2025/06/25/美团商业分析精英大赛亚军/决赛-终稿2.5_03.png"/><br /><img src="https://atffang.github.io/2025/06/25/美团商业分析精英大赛亚军/决赛-终稿2.5_04.png"/><br /><img src="https://atffang.github.io/2025/06/25/美团商业分析精英大赛亚军/决赛-终稿2.5_05.png"/><br /><img src="https://atffang.github.io/2025/06/25/美团商业分析精英大赛亚军/决赛-终稿2.5_06.png"/><br /><img src="https://atffang.github.io/2025/06/25/美团商业分析精英大赛亚军/决赛-终稿2.5_07.png"/><br /><img src="https://atffang.github.io/2025/06/25/美团商业分析精英大赛亚军/决赛-终稿2.5_08.png"/><br /><img src="https://atffang.github.io/2025/06/25/美团商业分析精英大赛亚军/决赛-终稿2.5_09.png"/><br /><img src="https://atffang.github.io/2025/06/25/美团商业分析精英大赛亚军/决赛-终稿2.5_10.png"/><br /><img src="https://atffang.github.io/2025/06/25/美团商业分析精英大赛亚军/决赛-终稿2.5_11.png"/><br /><img src="https://atffang.github.io/2025/06/25/美团商业分析精英大赛亚军/决赛-终稿2.5_12.png"/><br /><img src="https://atffang.github.io/2025/06/25/美团商业分析精英大赛亚军/决赛-终稿2.5_13.png"/><br /><img src="https://atffang.github.io/2025/06/25/美团商业分析精英大赛亚军/决赛-终稿2.5_14.png"/></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一起聚——面向聚餐场景的智能餐厅推荐系统&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ijgis online</title>
    <link href="https://atffang.github.io/2025/06/14/online%E5%BC%80%E9%A6%99%E6%A7%9F/"/>
    <id>https://atffang.github.io/2025/06/14/online%E5%BC%80%E9%A6%99%E6%A7%9F/</id>
    <published>2025-06-14T01:59:02.000Z</published>
    <updated>2025-06-14T02:11:11.658Z</updated>
    
    <content type="html"><![CDATA[<p>祝贺舒姐的ijgis上线。</p><span id="more"></span><p>从idea到online，前前后后花了一年多的时间，我在其中也只能提供一些微薄的帮助。作者真的太不容易了。<br />虽然现在没有机会主导撰写论文，但看到朋友的成功也会宽慰不少，共勉吧。</p><p>Xu, Y., Gong, Z., Fang, T., Zhang, H., &amp; Tang, G. (2025). Intercity human dynamics during holidays through the lens of travel movement–intention interactions in the hybrid physical–virtual space. <em>International Journal of Geographical Information Science</em>, 1–29. <a href="https://doi.org/10.1080/13658816.2025.2515200">https://doi.org/10.1080/13658816.2025.2515200</a></p><p><strong>Abstract</strong>:<br />Intercity human dynamics has involved increasing interactions between the physical world and cyberspace with the boom of the Internet and social media, expanding traditional intercity activities from a single dimension of physical space to a multidimensional hybrid space. Revealing the dynamics of intercity activities in a hybrid physical–virtual space requires considering interactions between human activities in both the physical world and cyberspace. However, existing studies often overlook cross-space interactions, failing to adequately model interactions between virtual and physical spaces in terms of the network structure and spatial effects. To address these gaps, this study investigates intercity human dynamics through travel movement–intention interactions. A multilayer network framework is proposed to represent the hybrid space, where travel movement–intention interactions can be conceptualized and measured. Using travel and search flows in China during the ‘Labor Day’ holiday periods in a three-year period of the pandemic, we demonstrate the proposed approach’s utility through an analysis of city centrality of multilayer networks. Results find that travel movement–intention interactions exhibit dynamic patterns that vary with city size and geographic distance. This approach is broadly applicable to studies of hybrid physical–virtual spaces, aiding the evaluation of human dynamics beyond intercity activities.</p><p>代码开源至：<br /><a href="https://doi.org/10.6084/m9.figshare.27929466">https://doi.org/10.6084/m9.figshare.27929466</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;祝贺舒姐的ijgis上线。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>从0开始学java 01 ：java面向对象的基础知识</title>
    <link href="https://atffang.github.io/2025/06/05/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6java1/"/>
    <id>https://atffang.github.io/2025/06/05/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6java1/</id>
    <published>2025-06-05T11:54:41.000Z</published>
    <updated>2025-06-29T07:47:09.474Z</updated>
    
    <content type="html"><![CDATA[<p>生活所迫呀。</p><span id="more"></span><p>由于生活所迫，我宣布我现在开始学java。</p><h3 id="第-1-章类与对象实战"><a class="markdownIt-Anchor" href="#第-1-章类与对象实战"></a> 第 1 章：类与对象实战</h3><h4 id="11-定义类-属性-方法"><a class="markdownIt-Anchor" href="#11-定义类-属性-方法"></a> 1.1 定义类、属性、方法</h4><p>在 Java 中，<strong>类（class）是对象的模板</strong>，<strong>对象（object）是类的实例</strong>。类中可以包含：</p><ul><li>属性（字段、变量）：描述对象的特征</li><li>方法：描述对象的行为<br />如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="comment">// 属性（成员变量）</span></span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法（成员方法）</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-创建对象并调用方法"><a class="markdownIt-Anchor" href="#12-创建对象并调用方法"></a> 1.2 创建对象并调用方法</h4><p>创建对象用关键字 <code>new</code>。创建后可以访问属性或调用方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名 = <span class="keyword">new</span> 类名();</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.name = <span class="string">&quot;fty&quot;</span>;</span><br><span class="line">p.age = <span class="number">23</span>;</span><br><span class="line">p.sayHellow();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13-构造方法编写与重载"><a class="markdownIt-Anchor" href="#13-构造方法编写与重载"></a> 1.3 构造方法编写与重载</h4><p><strong>构造方法（Constructor）</strong> 是在 <code>new</code> 一个对象时调用的方法，用来初始化属性。</p><ul><li>构造方法名必须与类名相同</li><li>构造方法可以有多个（重载）<br />如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">name = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参构造方法（重载）</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14-使用-this-关键字"><a class="markdownIt-Anchor" href="#14-使用-this-关键字"></a> 1.4 使用 <code>this</code> 关键字</h4><p><code>this</code> 是 Java 中的一个关键字，代表“当前对象”。<br />用在两个场景中：</p><ol><li>解决<strong>方法参数名和属性名冲突</strong></li><li>在类的方法中调用该对象自己的属性或方法<br />如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="built_in">this</span>.name + <span class="built_in">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><h3 id="第-2-章封装与访问控制实践"><a class="markdownIt-Anchor" href="#第-2-章封装与访问控制实践"></a> 第 2 章：封装与访问控制实践</h3><h4 id="21-使用-private-属性封装数据"><a class="markdownIt-Anchor" href="#21-使用-private-属性封装数据"></a> 2.1 使用 <code>private</code> 属性封装数据</h4><p>在 Java 中，<strong>封装（Encapsulation）</strong> 是把对象的属性隐藏起来，只通过方法进行访问和修改。<br />这通常通过把属性设为 <code>private</code> 实现，防止外部直接访问。<br />如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;   <span class="comment">// 私有属性，外部无法直接访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">introduce</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hi, my name is &quot;</span> + name + <span class="string">&quot;, I’m &quot;</span> + age + <span class="string">&quot; years old.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">// ❌ 不能直接访问私有属性</span></span><br><span class="line">        <span class="comment">// p.name = &quot;Tom&quot;;  // 编译错误！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22-编写-getter-setter"><a class="markdownIt-Anchor" href="#22-编写-getter-setter"></a> 2.2 编写 Getter / Setter</h4><p><strong>Getter/Setter</strong> 是访问私有属性的“通道”：</p><ul><li><code>getXxx()</code> 获取属性值</li><li><code>setXxx()</code> 设置属性值<br />如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">// 可以加判断逻辑，防止非法年龄</span></span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">0</span> &amp;&amp; age &lt;= <span class="number">150</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Invalid age.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p.setName(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        p.setAge(<span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + p.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + p.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23-类的访问控制修饰符应用"><a class="markdownIt-Anchor" href="#23-类的访问控制修饰符应用"></a> 2.3 类的访问控制修饰符应用</h4><p>Java 提供四种访问修饰符控制类和类成员的访问范围：</p><table><thead><tr><th>修饰符</th><th>类内</th><th>同包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td><code>private</code></td><td>✅</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td><code>default</code>（无修饰）</td><td>✅</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td><code>protected</code></td><td>✅</td><td>✅</td><td>✅</td><td>❌</td></tr><tr><td><code>public</code></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>如：</td><td></td><td></td><td></td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;Mammal&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">sound</span> <span class="operator">=</span> <span class="string">&quot;Growl&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">color</span> <span class="operator">=</span> <span class="string">&quot;Brown&quot;</span>;         <span class="comment">// default</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal info: &quot;</span> + type + <span class="string">&quot;, &quot;</span> + sound + <span class="string">&quot;, &quot;</span> + color + <span class="string">&quot;, &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        System.out.println(a.type);   <span class="comment">// ✅ public</span></span><br><span class="line">        System.out.println(a.sound);  <span class="comment">// ✅ 同包可访问 protected</span></span><br><span class="line">        System.out.println(a.color);  <span class="comment">// ✅ 同包可访问 default</span></span><br><span class="line">        <span class="comment">// System.out.println(a.age); // ❌ private，不能访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><h3 id="第-3-章继承语法与调用关系"><a class="markdownIt-Anchor" href="#第-3-章继承语法与调用关系"></a> 第 3 章：继承语法与调用关系</h3><h4 id="31-使用-extends-实现继承"><a class="markdownIt-Anchor" href="#31-使用-extends-实现继承"></a> 3.1 使用 <code>extends</code> 实现继承</h4><p>ava 使用 <code>extends</code> 关键字让一个类继承另一个类的属性和方法。<br />✅ 继承的作用：</p><ul><li>子类拥有父类的<strong>非 private 成员</strong>（属性和方法）</li><li>避免重复代码</li><li>体现「是一种（is-a）」的关系<br />如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal is eating...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Dog is barking...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.eat();  <span class="comment">// 继承自 Animal</span></span><br><span class="line">        dog.bark(); <span class="comment">// 自己的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="32-子类调用父类构造器与方法"><a class="markdownIt-Anchor" href="#32-子类调用父类构造器与方法"></a> 3.2 子类调用父类构造器与方法</h4><ul><li>构造器<strong>不能继承</strong>，但可以通过 <code>super()</code> 调用父类构造器。</li><li>子类实例化时，<strong>默认会先调用父类的无参构造器</strong>。<br />如：</li></ul><h5 id="321-父类有无参构造"><a class="markdownIt-Anchor" href="#321-父类有无参构造"></a> 3.2.1 父类有无参构造</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal constructor called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog constructor called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="322-父类只有有参构造时子类必须显式调用"><a class="markdownIt-Anchor" href="#322-父类只有有参构造时子类必须显式调用"></a> 3.2.2  父类只有有参构造时，子类必须显式调用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;Buddy&quot;</span>); <span class="comment">// 必须显式调用父类构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Dog created&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="33-使用-super-调用父类成员"><a class="markdownIt-Anchor" href="#33-使用-super-调用父类成员"></a> 3.3 使用 <code>super</code> 调用父类成员</h4><ul><li><code>super.变量名</code>：访问父类的属性</li><li><code>super.方法名()</code>：调用父类的方法<br />通常在<strong>子类重写父类方法</strong>时，用 <code>super</code> 调用原始实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal moves&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.move(); <span class="comment">// 调用父类方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Bird flies&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="34-子类方法重写override"><a class="markdownIt-Anchor" href="#34-子类方法重写override"></a> 3.4 子类方法重写（<code>@Override</code>）</h4><p>当子类对父类已有方法进行<strong>重新实现</strong>，称为“方法重写”或“覆盖”。<br />必须：</p><ul><li>方法名、参数列表相同</li><li>使用 <code>@Override</code> 注解（推荐）<br />如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal makes a sound&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat meows&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(); <span class="comment">// 向上转型</span></span><br><span class="line">        a.sound();            <span class="comment">// 输出 &quot;Cat meows&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然类型是 <code>Animal</code>，但调用的是 <code>Cat</code> 的实现 —— 这就是<strong>多态</strong>的表现。</p><hr /><h3 id="第-4-章方法重载与重写"><a class="markdownIt-Anchor" href="#第-4-章方法重载与重写"></a> 第 4 章：方法重载与重写</h3><h4 id="41-方法重载实现"><a class="markdownIt-Anchor" href="#41-方法重载实现"></a> 4.1 方法重载实现</h4><p><strong>方法重载</strong>是指在<strong>同一个类中</strong>，方法名相同，但参数列表不同（个数或类型）。其特点为：</p><ul><li>与返回值无关</li><li>是编译时多态的一种形式<br />如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        System.out.println(c.add(<span class="number">1</span>, <span class="number">2</span>));           <span class="comment">// int + int</span></span><br><span class="line">        System.out.println(c.add(<span class="number">1.5</span>, <span class="number">2.5</span>));       <span class="comment">// double + double</span></span><br><span class="line">        System.out.println(c.add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));        <span class="comment">// 三个 int</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="42-方法重写规则"><a class="markdownIt-Anchor" href="#42-方法重写规则"></a> 4.2 方法重写规则</h4><p><strong>方法重写</strong>发生在<strong>继承结构中</strong>，子类重写父类已有方法，必须满足以下规则：</p><table><thead><tr><th>要求</th><th>内容</th></tr></thead><tbody><tr><td>方法名</td><td>必须相同</td></tr><tr><td>参数列表</td><td>必须相同</td></tr><tr><td>返回值类型</td><td>必须相同或子类型</td></tr><tr><td>访问权限</td><td>不能低于父类</td></tr><tr><td>抛出异常</td><td>不能抛出更多的受检异常</td></tr><tr><td>标记</td><td>建议使用 <code>@Override</code> 注解</td></tr><tr><td>如：</td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal sound&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog barks&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        a.makeSound(); <span class="comment">// 输出：Dog barks</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="43-重写-vs-重载对比实战"><a class="markdownIt-Anchor" href="#43-重写-vs-重载对比实战"></a> 4.3 重写 vs 重载对比实战</h4><table><thead><tr><th>特性</th><th>重载（Overload）</th><th>重写（Override）</th></tr></thead><tbody><tr><td>定义位置</td><td>同一个类中</td><td>子类与父类之间</td></tr><tr><td>方法名</td><td>相同</td><td>相同</td></tr><tr><td>参数列表</td><td>必须不同</td><td>必须相同</td></tr><tr><td>返回值</td><td>可不同（不构成重载）</td><td>必须相同或是子类类型</td></tr><tr><td>访问修饰符</td><td>无限制</td><td>子类不能比父类更严格</td></tr><tr><td>多态</td><td>编译时多态</td><td>运行时多态</td></tr></tbody></table><hr /><h3 id="第-5-章多态与父类引用"><a class="markdownIt-Anchor" href="#第-5-章多态与父类引用"></a> 第 5 章：多态与父类引用</h3><h4 id="51-父类引用指向子类对象"><a class="markdownIt-Anchor" href="#51-父类引用指向子类对象"></a> 5.1 父类引用指向子类对象</h4><p>在Java中，<strong>父类类型的引用变量</strong>可以指向<strong>子类对象</strong>。这称为“向上转型”（Upcasting），是多态的基础。<br />如上面提到的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br></pre></td></tr></table></figure><ul><li>这里<code>a</code>的类型是<code>Animal</code>，但实际引用的是<code>Dog</code>对象。</li><li>父类引用只能访问父类中声明的成员（变量和方法）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal sound&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog barks&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wagTail</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog wags tail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();  <span class="comment">// 父类引用指向子类对象</span></span><br><span class="line">        a.makeSound();         <span class="comment">// 调用的是子类重写的方法</span></span><br><span class="line">        <span class="comment">// a.wagTail();        // 编译错误，父类引用不能调用子类独有方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="52-多态方法调用效果"><a class="markdownIt-Anchor" href="#52-多态方法调用效果"></a> 5.2 多态方法调用效果</h4><p>虽然引用类型是父类，但<strong>方法调用执行的是子类重写后的版本</strong>，体现“运行时绑定”。这让程序更加灵活，接口统一，具体实现多样。</p><ul><li>调用<strong>方法</strong>时，会执行子类重写的方法（如果有）；</li><li>访问<strong>成员变量</strong>时，访问的是引用类型所属类的变量（不支持多态）；<br />如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Animal&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Cat&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        System.out.println(a.name);  <span class="comment">// 输出 &quot;Animal&quot;</span></span><br><span class="line">        a.printName();               <span class="comment">// 输出 &quot;Cat&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="53-多态与数组-集合应用"><a class="markdownIt-Anchor" href="#53-多态与数组-集合应用"></a> 5.3 多态与数组、集合应用</h4><p>多态也可以与数组和集合结合使用，方便统一管理不同子类对象。<br />如：</p><h5 id="531-多态数组"><a class="markdownIt-Anchor" href="#531-多态数组"></a> 5.3.1 多态数组</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Animal[] animals = <span class="keyword">new</span> <span class="title class_">Animal</span>[<span class="number">3</span>];</span><br><span class="line">animals[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">animals[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">animals[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Animal a : animals) &#123;</span><br><span class="line">    a.makeSound();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="532-多态集合"><a class="markdownIt-Anchor" href="#532-多态集合"></a> 5.3.2 多态集合</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line">List&lt;Animal&gt; animalList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">animalList.add(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">animalList.add(<span class="keyword">new</span> <span class="title class_">Cat</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Animal a : animalList) &#123;</span><br><span class="line">    a.makeSound();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><h3 id="第-6-章object-类与常用方法"><a class="markdownIt-Anchor" href="#第-6-章object-类与常用方法"></a> 第 6 章：<code>Object</code> 类与常用方法</h3><h4 id="61-tostring-方法重写"><a class="markdownIt-Anchor" href="#61-tostring-方法重写"></a> 6.1 <code>toString()</code> 方法重写</h4><p><code>toString()</code> 是 <code>Object</code> 类中定义的方法，所有Java类默认继承。 默认实现返回的是对象的<strong>类名 + @ + 哈希码</strong>，不够直观。 重写 <code>toString()</code> 让对象打印时更具可读性，常用于调试和日志。<br />如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, age=&quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>);</span><br><span class="line">        System.out.println(p);  <span class="comment">// 自动调用 toString()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="62-equals-比较对象内容"><a class="markdownIt-Anchor" href="#62-equals-比较对象内容"></a> 6.2 <code>equals()</code> 比较对象内容</h4><p>默认 <code>equals()</code> 方法是比较两个对象的<strong>引用地址</strong>（即是否是同一个对象）, 重写 <code>equals()</code> 方法，通常基于对象的<strong>属性内容</strong>进行比较。常与 <code>hashCode()</code> 一起重写，以保证集合中的正确行为。<br />如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数和 getter/setter 省略</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj) <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 比较同一个对象</span></span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span> || getClass() != obj.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 类型检查</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">other</span> <span class="operator">=</span> (Person) obj;</span><br><span class="line">        <span class="keyword">return</span> age == other.age &amp;&amp; (name != <span class="literal">null</span> ? name.equals(other.name) : other.name == <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        System.out.println(p1.equals(p2));  <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="63-clone-方法与浅拷贝"><a class="markdownIt-Anchor" href="#63-clone-方法与浅拷贝"></a> 6.3 <code>clone()</code> 方法与浅拷贝</h4><p><code>clone()</code> 是 <code>Object</code> 中的一个方法，用来复制对象。 默认实现是<strong>浅拷贝</strong>：基本类型拷贝，引用类型只复制引用。 需要实现 <code>Cloneable</code> 接口并重写 <code>clone()</code>，否则会抛出异常。浅拷贝对于对象中有引用类型字段时，拷贝后两个对象会共享同一个引用字段。<br />如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">(String city)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Address <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> (Address) <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter 省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Person <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">cloned</span> <span class="operator">=</span> (Person) <span class="built_in">super</span>.clone();</span><br><span class="line">        <span class="comment">// 浅拷贝：address对象引用被复制，两个Person共享同一个Address对象</span></span><br><span class="line">        <span class="keyword">return</span> cloned;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Person</code> 的 <code>clone()</code> 是浅拷贝，拷贝的 <code>Person</code> 对象和原对象的 <code>address</code> 指向同一个 <code>Address</code> 实例。</li><li>若需完全拷贝（深拷贝），需要对引用字段也进行 <code>clone()</code>。</li></ul><hr /><h3 id="第-7-章static-与-final-关键字用法"><a class="markdownIt-Anchor" href="#第-7-章static-与-final-关键字用法"></a> 第 7 章：<code>static</code> 与 <code>final</code> 关键字用法</h3><h4 id="71-静态属性与静态方法"><a class="markdownIt-Anchor" href="#71-静态属性与静态方法"></a> 7.1 静态属性与静态方法</h4><ul><li><strong><code>static</code></strong> 修饰的成员属于类本身，而不是某个对象。</li><li>静态属性（变量）在内存中只有一份，所有对象共享。</li><li>静态方法可以直接通过类名调用，无需创建实例。</li><li>静态方法中不能访问非静态成员（因为非静态属于对象）。<br />如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 静态变量，所有对象共享</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Counter</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;  <span class="comment">// 每创建一个对象，count自增</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;  <span class="comment">// 静态方法，访问静态变量</span></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Counter</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Counter</span>();</span><br><span class="line">        System.out.println(Counter.getCount());  <span class="comment">// 输出 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="72-静态代码块"><a class="markdownIt-Anchor" href="#72-静态代码块"></a> 7.2 静态代码块</h4><ul><li>静态代码块用于类加载时执行一次的初始化操作。</li><li>适合做复杂的静态变量初始化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String ENV;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> MAX_USERS;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ENV = <span class="string">&quot;production&quot;</span>;</span><br><span class="line">        MAX_USERS = <span class="number">1000</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Config 类被加载，静态代码块执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Config.ENV);       <span class="comment">// &quot;production&quot;</span></span><br><span class="line">        System.out.println(Config.MAX_USERS); <span class="comment">// 1000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：静态代码块只执行一次，且在类被首次加载时执行。</p><h4 id="73-final-类-方法-变量使用"><a class="markdownIt-Anchor" href="#73-final-类-方法-变量使用"></a> 7.3 <code>final</code> 类、方法、变量使用</h4><p><code>final</code> 可以修饰变量、方法、类，含义不同：</p><table><thead><tr><th>用法</th><th>说明</th></tr></thead><tbody><tr><td>final 变量</td><td>常量，一旦赋值不可更改</td></tr><tr><td>final 方法</td><td>不可被子类重写</td></tr><tr><td>final 类</td><td>不能被继承的类（比如 <code>String</code> 类）</td></tr><tr><td>如：</td><td></td></tr></tbody></table><h5 id="731-final变量"><a class="markdownIt-Anchor" href="#731-final变量"></a> 7.3.1 final变量</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constants</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14159</span>;  <span class="comment">// 常量，命名规范全部大写</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// PI = 3.14;  // 编译错误，final变量不可修改</span></span><br><span class="line">        System.out.println(Constants.PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="732-final方法"><a class="markdownIt-Anchor" href="#732-final方法"></a> 7.3.2 final方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Parent final method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// public void show() &#123;  // 编译错误，final方法不能被重写</span></span><br><span class="line">    <span class="comment">//     System.out.println(&quot;Child override&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="733-final类"><a class="markdownIt-Anchor" href="#733-final类"></a> 7.3.3 final类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Utility</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">help</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Helping...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class ExtendedUtility extends Utility &#123;  // 编译错误，final类不能被继承</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><hr /><h3 id="第-8-章抽象类与接口"><a class="markdownIt-Anchor" href="#第-8-章抽象类与接口"></a> 第 8 章：抽象类与接口</h3><h4 id="81-抽象类与抽象方法编写"><a class="markdownIt-Anchor" href="#81-抽象类与抽象方法编写"></a> 8.1 抽象类与抽象方法编写</h4><ul><li><strong>抽象类</strong> 是不能被实例化的类，用于被继承。</li><li>抽象类中可以包含抽象方法（没有方法体，只定义方法签名），必须由子类实现。</li><li>抽象类也可以有普通方法和成员变量。</li><li>用 <code>abstract</code> 关键字声明。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法，没有方法体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; is sleeping.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; says: Woof!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Buddy&quot;</span>);</span><br><span class="line">        dog.sound();  <span class="comment">// 输出 Buddy says: Woof!</span></span><br><span class="line">        dog.sleep();  <span class="comment">// 输出 Buddy is sleeping.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="82-接口的定义与实现"><a class="markdownIt-Anchor" href="#82-接口的定义与实现"></a> 8.2 接口的定义与实现</h4><ul><li><strong>接口</strong> 是一种纯抽象的规范，只有方法签名和常量（Java 8+ 支持默认方法和静态方法）。</li><li>类通过 <code>implements</code> 关键字实现接口，必须实现接口中的所有抽象方法。</li><li>接口体现的是“能做什么”的能力，抽象类体现的是“是什么”的属性和行为。<br />如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Swimmable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Duck</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span>, Swimmable &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Duck is flying.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Duck is swimming.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Duck</span> <span class="variable">duck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Duck</span>();</span><br><span class="line">        duck.fly();</span><br><span class="line">        duck.swim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="83-接口多实现-向上转型"><a class="markdownIt-Anchor" href="#83-接口多实现-向上转型"></a> 8.3 接口多实现、向上转型</h4><ul><li>一个类可以实现多个接口（多继承的替代方案）。</li><li>可以将实现类对象向上转型为接口类型，利用多态调用接口方法。</li><li>接口变量只能调用接口中声明的方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Duck</span> <span class="variable">duck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Duck</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Flyable</span> <span class="variable">f</span> <span class="operator">=</span> duck;   <span class="comment">// 向上转型为Flyable接口</span></span><br><span class="line">        <span class="type">Swimmable</span> <span class="variable">s</span> <span class="operator">=</span> duck; <span class="comment">// 向上转型为Swimmable接口</span></span><br><span class="line"></span><br><span class="line">        f.fly();  <span class="comment">// 调用Flyable的方法</span></span><br><span class="line">        s.swim(); <span class="comment">// 调用Swimmable的方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// duck.fly();  // 直接调用实现类方法也可以</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="84-继承和实现的混合使用"><a class="markdownIt-Anchor" href="#84-继承和实现的混合使用"></a> 8.4 继承和实现的混合使用</h4><ul><li>一个类只能继承<strong>一个</strong>直接父类（单继承）。</li><li>但可以实现<strong>多个</strong>接口（多实现）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal is eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类继承父类，同时实现接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bird is flying&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Bird</span> <span class="variable">bird</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">        bird.eat();  <span class="comment">// 继承自 Animal</span></span><br><span class="line">        bird.fly();  <span class="comment">// 实现自 Flyable</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第-8-章示例-地理要素系统"><a class="markdownIt-Anchor" href="#第-8-章示例-地理要素系统"></a> 第 8 章：示例-地理要素系统</h3><h4 id="设计说明"><a class="markdownIt-Anchor" href="#设计说明"></a> 设计说明</h4><ul><li>抽象类 <code>GeoFeature</code>（地理要素），定义公共属性和抽象方法</li><li>子类：<code>PointFeature</code>（点）、<code>LineFeature</code>（线）、<code>PolygonFeature</code>（多边形）</li><li>接口 <code>Renderable</code>（可渲染），<code>Calculable</code>（可计算面积或长度）</li><li>利用封装隐藏属性，提供 getter/setter</li><li>使用 <code>static</code> 统计创建的地理要素数量</li><li>使用 <code>final</code> 定义常量和禁止修改的方法</li><li>重写 <code>toString()</code>, <code>equals()</code>, <code>clone()</code></li><li>演示多态和接口多实现</li></ul><h4 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 抽象类，定义基础地理要素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">GeoFeature</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">featureCount</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 统计创建要素数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GeoFeature</span><span class="params">(String id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        featureCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装属性</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123; <span class="built_in">this</span>.id = id; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getFeatureCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> featureCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法，必须子类实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// final方法，不能被子类覆盖，打印信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;GeoFeature: &quot;</span> + toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写toString()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ID=&quot;</span> + id + <span class="string">&quot;, Name=&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写equals，按id判断</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> GeoFeature)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">GeoFeature</span> <span class="variable">other</span> <span class="operator">=</span> (GeoFeature) obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id.equals(other.id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现clone浅拷贝</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GeoFeature <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (GeoFeature) <span class="built_in">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 接口：可渲染</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Renderable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 接口：可计算长度或面积</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Calculable</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">calculate</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 点要素</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PointFeature</span> <span class="keyword">extends</span> <span class="title class_">GeoFeature</span> <span class="keyword">implements</span> <span class="title class_">Renderable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> x, y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PointFeature</span><span class="params">(String id, String name, <span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(id, name);</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getX</span><span class="params">()</span> &#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(<span class="type">double</span> x)</span> &#123; <span class="built_in">this</span>.x = x; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getY</span><span class="params">()</span> &#123; <span class="keyword">return</span> y; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(<span class="type">double</span> y)</span> &#123; <span class="built_in">this</span>.y = y; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing Point at (&quot;</span> + x + <span class="string">&quot;,&quot;</span> + y + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Rendering Point: &quot;</span> + getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.toString() + <span class="string">&quot;, Point(&quot;</span> + x + <span class="string">&quot;,&quot;</span> + y + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 线要素</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LineFeature</span> <span class="keyword">extends</span> <span class="title class_">GeoFeature</span> <span class="keyword">implements</span> <span class="title class_">Renderable</span>, Calculable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LineFeature</span><span class="params">(String id, String name, <span class="type">double</span> length)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(id, name);</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getLength</span><span class="params">()</span> &#123; <span class="keyword">return</span> length; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">double</span> length)</span> &#123; <span class="built_in">this</span>.length = length; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing Line of length &quot;</span> + length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Rendering Line: &quot;</span> + getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法重载：计算长度乘以比例尺</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(<span class="type">double</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length * scale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.toString() + <span class="string">&quot;, Line length=&quot;</span> + length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 多边形要素</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PolygonFeature</span> <span class="keyword">extends</span> <span class="title class_">GeoFeature</span> <span class="keyword">implements</span> <span class="title class_">Renderable</span>, Calculable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> area;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PolygonFeature</span><span class="params">(String id, String name, <span class="type">double</span> area)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(id, name);</span><br><span class="line">        <span class="built_in">this</span>.area = area;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123; <span class="keyword">return</span> area; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArea</span><span class="params">(<span class="type">double</span> area)</span> &#123; <span class="built_in">this</span>.area = area; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing Polygon of area &quot;</span> + area);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Rendering Polygon: &quot;</span> + getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> area;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.toString() + <span class="string">&quot;, Polygon area=&quot;</span> + area;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;生活所迫呀。&lt;/p&gt;</summary>
    
    
    
    <category term="编程学习-java" scheme="https://atffang.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-java/"/>
    
    
  </entry>
  
  <entry>
    <title>继续聊聊异步</title>
    <link href="https://atffang.github.io/2025/05/29/%E7%BB%A7%E7%BB%AD%E8%81%8A%E8%81%8A%E5%BC%82%E6%AD%A5/"/>
    <id>https://atffang.github.io/2025/05/29/%E7%BB%A7%E7%BB%AD%E8%81%8A%E8%81%8A%E5%BC%82%E6%AD%A5/</id>
    <published>2025-05-29T15:39:59.000Z</published>
    <updated>2025-05-29T15:46:47.446Z</updated>
    
    <content type="html"><![CDATA[<p>和之前的文章呼应下，继续介绍python的异步机制。</p><span id="more"></span><p>在之前的文章中（指路[<a href="https://atffang.github.io/2025/02/21/asyncio%E6%B5%85%E6%9E%90/#more">https://atffang.github.io/2025/02/21/asyncio浅析/#more</a>]），我们简单学习了python的asynicio机制，但当我回看这篇文章时，仍然觉得许多东西——特别是概念，没有讲清楚。因此有了这篇文章，我们将从底层机制开始介绍python中的异步操作。</p><h3 id="为什么要异步"><a class="markdownIt-Anchor" href="#为什么要异步"></a> 为什么要异步？</h3><p>中国人应该都听过华罗庚烧开水的故事。其中办法甲是洗好水壶，灌上凉水，放在火上；在等待水开的时间里，洗茶壶、洗茶杯、拿茶叶；等水开了，泡茶喝。等待某个事件完成（比如水开）时，如果一直干等，时间就被浪费了；如果能利用等待时间去做其他有意义的事情，效率就会更高。在程序设计中，也是如此：</p><p>当程序遇到“必须等待”的操作时，比如等待网络响应、磁盘读写、用户输入，如果我们像传统方式那样干等，就会浪费大量宝贵时间。而如果我们能在等待的间隙去做别的事情，整体运行效率就能大幅提升。</p><p>这就是 <strong>异步编程（Asynchronous Programming）</strong> 的核心思想。异步编程是一种程序设计方式，它允许程序在遇到耗时操作时“暂时挂起当前任务”，去执行其他任务，待耗时操作完成后再回来继续执行。这样，程序不会因为等待某个操作而“卡死”或闲置，特别适合处理大量 I/O 操作的场景。</p><h3 id="协程"><a class="markdownIt-Anchor" href="#协程"></a> 协程</h3><p>协程（Coroutine）是一种程序结构，允许函数在执行过程中暂停（挂起）并在未来某个时间恢复执行。它是一种“可暂停的函数”，实现了非抢占式的多任务协作。通俗来说，协程可以在执行中途“让出控制权”，让其他协程运行，等到时机合适再“继续执行”，而不是像线程那样被操作系统抢占。</p><p>Python中的协程，特别是用 async def 定义的异步协程，实际上是基于<strong>生成器（generator）</strong> 机制演化而来的。生成器是一种特殊的迭代器，它可以在执行过程中暂停，并在需要时恢复执行。生成器函数使用 yield 关键字来生成值，每次调用 yield 时，函数会暂停执行，并返回一个值给调用者。下次调用生成器时，函数会从上次暂停的地方继续执行。这种暂停等待执行的状态成为<strong>挂起</strong>，传统函数调用有自己的调用栈，调用结束后栈帧销毁，而挂起状态的函数并不会销毁内部变量和参数。</p><p>Python中，每次函数调用都会创建一个 帧对象（PyFrameObject，C语言结构体），它包含了函数执行的所有上下文信息：</p><ul><li>当前指令指针（程序计数器，PC），指示下一条要执行的字节码位置</li><li>局部变量和参数</li><li>操作数栈状态</li><li>代码对象引用</li></ul><p>生成器和协程本质上也是函数调用，只不过在挂起时不会销毁帧对象，而是把它冻结保存起来。当协程执行到await或者yield时，Python解释器暂停执行当前帧，保存当前指令指针位置（即当前字节码执行到哪一步了）。局部变量、操作栈以及执行环境的状态都保存在该帧对象内，这个帧对象作为生成器/协程对象的内部状态，存活在内存中。当事件循环或调度器认为条件满足（比如等待的异步I/O完成），它会调用生成器/协程的 <code>.send()</code> 或 <code>.__await__()</code> 方法，让Python解释器加载之前保存的帧对象状态，从断点处继续执行字节码。</p><h3 id="事件循环"><a class="markdownIt-Anchor" href="#事件循环"></a> 事件循环</h3><p><strong>事件循环（Event Loop）</strong> 是异步编程的核心调度机制，它不断循环监视“任务队列”或“事件源”，并在任务准备好执行时唤醒它们。我们在之前的文章中已经提到，协程对象执行到 <code>await</code> 会挂起并返回控制权，而要继续执行，就必须有一个机制来等待 <code>await</code> 的异步任务完成，再恢复暂停的协程。这个“等待+恢复”的过程，由事件循环自动调度完成。事件循环由下面四个关键部分组成：</p><ul><li><p><strong>Task 队列（任务队列）</strong><br />一个 Task 是对协程的封装，用于注册到事件循环中，并自动驱动协程的执行流程。协程对象会被封装为 asyncio.Task 对象，并加入事件循环管理的队列。</p></li><li><p><strong>Future 对象</strong><br />表示一个尚未完成的异步操作，类似于 JavaScript 的 Promise。Future是Task的父类，而await 的结果通常是 Future。</p></li><li><p><strong>IO 多路复用器</strong><br />使用操作系统的 select/epoll/kqueue/IOCP 来等待 I/O 事件。每个 await 的对象会注册一个 I/O 事件（如 socket 可读、定时器到期），这些事件会被提交到 selector，操作系统会在事件准备好时通知事件循环，事件循环再调用回调函数恢复协程。</p></li><li><p><strong>调度器</strong><br />调度器是事件循环的大脑，它控制协程的暂停与恢复。协程本质是生成器（generator）的拓展，调度行为是调用其 <code>send()</code> 或 <code>throw()</code> 方法。协程首次执行相当于 <code>coro.send(None)</code>，遇到 <code>await</code> 时将控制权交还给事件循环，并返回一个 <code>Future</code> 对象。事件循环等待 <code>Future</code> 对象完成，然后调用 <code>task._step()</code> 方法，执行 <code>coro.send(result)</code> ，恢复协程执行直到下一个 <code>await</code> 或结束。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+---------------------------+</span><br><span class="line">| asyncio.Task |</span><br><span class="line">| - 包含一个协程对象 |</span><br><span class="line">+---------------------------+</span><br><span class="line">↓</span><br><span class="line">初始执行 coro.send(<span class="literal">None</span>)</span><br><span class="line">↓</span><br><span class="line">协程执行 → 遇到 <span class="keyword">await</span></span><br><span class="line">↓</span><br><span class="line">返回 Future，挂起协程</span><br><span class="line">↓</span><br><span class="line">Future 注册到底层 IO selector</span><br><span class="line">↓</span><br><span class="line">事件完成 → Future 被标记为 done</span><br><span class="line">↓</span><br><span class="line">唤醒 Task → 再次执行 coro.send(result)</span><br><span class="line">↓</span><br><span class="line">直至结束</span><br></pre></td></tr></table></figure><h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3><h4 id="爬虫"><a class="markdownIt-Anchor" href="#爬虫"></a> 爬虫</h4><p>任务目标：我们有 5 个网页，要同时请求它们的内容并提取标题。我们希望在不阻塞主线程的情况下完成所有请求。如果使用串行执行的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">  </span><br><span class="line">urls = [</span><br><span class="line"><span class="string">&quot;https://1.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://2.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://3.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://4.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://5.com&quot;</span></span><br><span class="line">] </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_title</span>(<span class="params">url</span>):</span><br><span class="line">response = requests.get(url)</span><br><span class="line"><span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;url&#125;</span> - status: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line"><span class="built_in">print</span>(get_title(url))</span><br></pre></td></tr></table></figure><p>所有请求会一个接一个等。<br />如果使用异步方式（并发请求，非阻塞）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_title</span>(<span class="params">session, url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        text = <span class="keyword">await</span> response.text()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;url&#125;</span> - status: <span class="subst">&#123;response.status&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        tasks = [get_title(session, url) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line">        results = <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">            <span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><h4 id="处理大量文件上传"><a class="markdownIt-Anchor" href="#处理大量文件上传"></a> 处理大量文件上传</h4><p>你在做一个网站，有很多用户同时上传文件（比如照片），你需要接收上传请求/将文件保存到磁盘或对象存储/同时记录用户上传日志（如用户名、时间、文件名）到数据库或日志文件中。<br />如果使用同步方式，所有请求会一个接一个等，用户上传文件时，其他用户只能等待:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_file</span>(<span class="params">user, file_name</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)  <span class="comment"># 模拟写文件</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[保存] 用户 <span class="subst">&#123;user&#125;</span> 上传了 <span class="subst">&#123;file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_upload</span>(<span class="params">user, file_name</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)  <span class="comment"># 模拟写日志</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[日志] 记录 <span class="subst">&#123;user&#125;</span> 上传了 <span class="subst">&#123;file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_upload</span>(<span class="params">user, file_name</span>):</span><br><span class="line">    save_file(user, file_name)</span><br><span class="line">    log_upload(user, file_name)</span><br><span class="line"></span><br><span class="line">users = [(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;a.png&quot;</span>), (<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;b.jpg&quot;</span>), (<span class="string">&quot;Carol&quot;</span>, <span class="string">&quot;c.docx&quot;</span>)]</span><br><span class="line"><span class="keyword">for</span> user, file <span class="keyword">in</span> users:</span><br><span class="line">    handle_upload(user, file)</span><br></pre></td></tr></table></figure><p>如果使用异步方式，所有请求可以同时处理，用户上传文件时，其他用户可以继续上传。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">save_file</span>(<span class="params">user, file_name</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 模拟异步写文件</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[保存] 用户 <span class="subst">&#123;user&#125;</span> 上传了 <span class="subst">&#123;file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">log_upload</span>(<span class="params">user, file_name</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)  <span class="comment"># 模拟异步写日志</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[日志] 记录 <span class="subst">&#123;user&#125;</span> 上传了 <span class="subst">&#123;file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">handle_upload</span>(<span class="params">user, file_name</span>):</span><br><span class="line">    <span class="keyword">await</span> save_file(user, file_name)</span><br><span class="line">    <span class="keyword">await</span> log_upload(user, file_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    users = [(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;a.png&quot;</span>), (<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;b.jpg&quot;</span>), (<span class="string">&quot;Carol&quot;</span>, <span class="string">&quot;c.docx&quot;</span>)]</span><br><span class="line">    tasks = [handle_upload(user, file) <span class="keyword">for</span> user, file <span class="keyword">in</span> users]</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;和之前的文章呼应下，继续介绍python的异步机制。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>重返统计学1：从最大似然开始</title>
    <link href="https://atffang.github.io/2025/05/28/%E9%87%8D%E8%BF%94%E7%BB%9F%E8%AE%A1%E5%AD%A62%E4%BB%8E%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E5%BC%80%E5%A7%8B/"/>
    <id>https://atffang.github.io/2025/05/28/%E9%87%8D%E8%BF%94%E7%BB%9F%E8%AE%A1%E5%AD%A62%E4%BB%8E%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E5%BC%80%E5%A7%8B/</id>
    <published>2025-05-28T14:24:16.000Z</published>
    <updated>2025-05-28T14:28:10.645Z</updated>
    
    <content type="html"><![CDATA[<p>介绍一下最大似然</p><span id="more"></span><img src="https://atffang.github.io/2025/05/28/重返统计学2从最大似然开始/MLE.png"/>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍一下最大似然&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>重返统计学0：绪论</title>
    <link href="https://atffang.github.io/2025/05/27/%E9%87%8D%E8%BF%94%E7%BB%9F%E8%AE%A1%E5%AD%A60%E7%BB%AA%E8%AE%BA/"/>
    <id>https://atffang.github.io/2025/05/27/%E9%87%8D%E8%BF%94%E7%BB%9F%E8%AE%A1%E5%AD%A60%E7%BB%AA%E8%AE%BA/</id>
    <published>2025-05-27T12:20:35.000Z</published>
    <updated>2025-05-27T12:21:22.983Z</updated>
    
    <content type="html"><![CDATA[<p>挖个坑</p><span id="more"></span><p>作为一个地理系的学生，诚实的说，我对数学与统计学的认识十分有限而肤浅。唯一的训练是在本科时的基础课程概率论课上，那时正值南京新冠最严重的22年年初，多数的课通过网课的形式完成，或许这里面一多半时间还在睡梦中。在此之后，除了零零碎碎接触的知识，再也没系统性的学习过统计学，以至于现在总是力不从心。因此，打算新开一个坑，从一个小白的角度重新学习面向机器学习与地理的统计学知识，共勉！</p><p>统计学（Statistics）一词源自拉丁语 status（意为“国家事务”），最早在17世纪的德意志地区，用于指代关于国家人口、土地、税收的系统性数据收集与描述，被称为“政治算术”（Political Arithmetic）。随着时代发展，它逐渐脱离行政统计的原始功能，<strong>成为一门研究不确定性、分析数据规律、从样本推断总体的科学</strong>。</p><p>统计学的形成并非一蹴而就，而是在长期应对不确定性与社会复杂性的历史进程中逐步建立起来的。最初，17世纪的“政治算术”是统计思想的雏形，约翰·格朗特与威廉·配第通过对伦敦死亡票据的分析，首次尝试利用数据揭示人口规律，这种自国家行政管理中抽离出的数量思维，构成了统计学最早的社会实践背景。18世纪，雅各布·伯努利提出了大数定律，强调了样本频率与真实概率之间的趋同关系，拉开了从经验总结向概率理论过渡的序幕。同一时期，贝叶斯定理的提出标志着另一种思维路径的诞生，即将先验知识与数据更新相结合，探索对不确定现象进行概率建模的可能性</p><p>进入19世纪，随着数学分析的发展，统计学逐渐获得更加严密的形式化基础。高斯在误差理论中提出正态分布和最小二乘估计，拉普拉斯则将概率方法应用于天体运动分析，他们的工作将统计方法首次嵌入自然科学建模之中，也开启了参数估计与模型拟合的时代。到20世纪，统计学迎来了系统化的理论建构。罗纳德·费雪被广泛认为是现代统计学的奠基者之一，他不仅提出了极大似然估计、方差分析、设计实验等核心概念，还在哲学上确立了频率派立场，主张在重复试验中定义概率，并强调统计推断的客观性。与之并立的则是以杰弗里斯和萨维奇为代表的贝叶斯学派，强调知识的不确定性来源于认知主体本身，通过主观先验与后验更新，实现具有解释力的模型推理。这一“客观 vs 主观”、“频率 vs 信念”的思想分歧，至今仍构成统计方法论上的根本张力。</p><p>到了21世纪，随着计算能力的跃升与数据体量的激增，统计学与人工智能、机器学习逐步融合，形成了以预测精度、模型泛化能力为导向的新范式。在这一背景下，统计学习理论、正则化方法、贝叶斯推理和高维建模成为主流应用技术的理论支柱。统计模型不再仅仅用于科学实验与假设检验，而广泛应用于图像识别、自然语言处理、医疗诊断、政策评估等复杂系统的建模中，进一步模糊了“推断”与“预测”的边界。</p><p><strong>统计学的核心使命，是在面对不确定性和变异性的现实世界中，从有限样本中提取信息、推断总体特征，建立描述或解释变量间关系的模型</strong>。</p><p>频率与概率的区别，是统计学中一个根本而经典的问题，也正是区分统计学两大主要流派——频率派（Frequentist）和贝叶斯派（Bayesian）的核心所在。</p><p>在频率派统计学中，概率被严格定义为在大量重复独立试验中某事件发生的相对频率的极限。也就是说，概率是一个长期稳定出现的频率值，它是客观存在且可通过反复实验验证的数值。例如，抛硬币时正面朝上的概率是0.5，是在无限次抛掷中正面次数与总次数的比值趋近的极限。这种定义强调概率的客观性和实验可重复性，概率不存在于单次试验，而是长期统计规律的体现。</p><p>而在贝叶斯派中，概率则被解释为个体对某一事件发生不确定性的主观信念程度。概率是描述“知识状态”或“信息”的工具，可以用来表达对单个事件的可信度。贝叶斯概率不需要重复试验的物理基础，而是通过先验知识与新观测的结合，利用贝叶斯定理动态更新。比如，你对某个病人患病概率的估计，既包含医学知识，也包含个人观察结果，这种概率更像是“信念”的度量。</p><p>总结而言，频率派认为，参数是自然界固定的未知常数，数据是随机变量。统计推断的目标是利用样本数据来估计这些固定参数。而贝叶斯派则认为，参数本身就是随机变量，参数的不确定性通过一个先验分布来描述。在下一章中，我们将首先对这两个概念进行介绍，作为整个系列的引子。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;挖个坑&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>typing：规范友好的代码</title>
    <link href="https://atffang.github.io/2025/05/23/typing%E8%A7%84%E8%8C%83%E5%8F%8B%E5%A5%BD%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
    <id>https://atffang.github.io/2025/05/23/typing%E8%A7%84%E8%8C%83%E5%8F%8B%E5%A5%BD%E7%9A%84%E4%BB%A3%E7%A0%81/</id>
    <published>2025-05-23T02:27:49.000Z</published>
    <updated>2025-05-23T03:03:31.548Z</updated>
    
    <content type="html"><![CDATA[<p>使用typing增强Python代码的可读性、可维护性，并帮助静态分析工具进行错误检查。</p><span id="more"></span><p>Python 的 typing 模块是用于 <strong>类型注解和静态类型检查</strong> 的标准库工具。它为你编写类型安全、可读性强的大型代码提供了支持。</p><h3 id="基础类型和泛型容器类型"><a class="markdownIt-Anchor" href="#基础类型和泛型容器类型"></a> 基础类型和泛型容器类型</h3><p><strong>基础类型注解</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>, <span class="built_in">float</span>, <span class="built_in">str</span>, <span class="built_in">bool</span>, <span class="built_in">bytes</span></span><br></pre></td></tr></table></figure><ul><li>Python 内置类型就可以直接用作注解</li></ul><p><strong>泛型容器类型</strong></p><table><thead><tr><th><strong>类型</strong></th><th><strong>用法示例</strong></th></tr></thead><tbody><tr><td>List</td><td>List[int] — 整数列表</td></tr><tr><td>Dict</td><td>Dict[str, float] — 键为字符串，值为浮点数</td></tr><tr><td>Tuple</td><td>Tuple[int, str] — 二元组</td></tr><tr><td>Set</td><td>Set[int]</td></tr><tr><td>FrozenSet</td><td>FrozenSet[str]</td></tr></tbody></table><ul><li>Python 3.9+ 支持原生写法，如 <code>list[int]</code>替代 <code>List[int]</code>。<br />例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">scores: <span class="type">List</span>[<span class="built_in">float</span>]</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(scores) / <span class="built_in">len</span>(scores)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(average([<span class="number">90.0</span>, <span class="number">85.5</span>, <span class="number">78.0</span>]))  <span class="comment"># 输出：84.5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_student_score</span>(<span class="params">name: <span class="built_in">str</span>, records: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">float</span>]</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> records[name]</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;Alice&quot;</span>: <span class="number">91.5</span>, <span class="string">&quot;Bob&quot;</span>: <span class="number">88.0</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(get_student_score(<span class="string">&quot;Alice&quot;</span>, data))  <span class="comment"># 输出：91.5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_student_info</span>() -&gt; <span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">&quot;Alice&quot;</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">name, age = get_student_info()</span><br><span class="line"><span class="built_in">print</span>(name, age)  <span class="comment"># 输出：Alice 20</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">total_scores</span>(<span class="params">data: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">return</span> &#123;name: <span class="built_in">sum</span>(scores) <span class="keyword">for</span> name, scores <span class="keyword">in</span> data.items()&#125;</span><br><span class="line"></span><br><span class="line">records = &#123;</span><br><span class="line">    <span class="string">&quot;Alice&quot;</span>: [<span class="number">90</span>, <span class="number">85</span>, <span class="number">92</span>],</span><br><span class="line">    <span class="string">&quot;Bob&quot;</span>: [<span class="number">78</span>, <span class="number">80</span>, <span class="number">74</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(total_scores(records))  <span class="comment"># 输出：&#123;&#x27;Alice&#x27;: 267, &#x27;Bob&#x27;: 232&#125;</span></span><br></pre></td></tr></table></figure><h3 id="通用类型工具"><a class="markdownIt-Anchor" href="#通用类型工具"></a> 通用类型工具</h3><table><thead><tr><th><strong>工具</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Any</td><td>任意类型</td></tr><tr><td>Union</td><td>多种类型之一，例如 Union[int, str]</td></tr><tr><td>Optional</td><td>可以是某种类型或 None，等价于 Union[T, None]</td></tr><tr><td>Callable</td><td>函数类型，例如 Callable[[int, int], str] 表示接受两个 int 返回 str 的函数</td></tr><tr><td>Literal</td><td>指定字面值，例如 Literal[‘yes’, ‘no’]</td></tr><tr><td>TypeVar</td><td>泛型类型变量（定义泛型函数或类时使用）</td></tr><tr><td>Generic</td><td>创建自定义泛型类时用</td></tr><tr><td>Final</td><td>声明不能被重写或赋值的变量/属性</td></tr><tr><td>ClassVar</td><td>用于声明类变量，而非实例变量</td></tr><tr><td>例如：</td><td></td></tr></tbody></table><h4 id="typevar"><a class="markdownIt-Anchor" href="#typevar"></a> TypeVar</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">&#x27;T&#x27;</span>)  <span class="comment"># 声明一个通用类型变量 T</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap</span>(<span class="params">a: T, b: T</span>) -&gt; <span class="type">Tuple</span>[T, T]:</span><br><span class="line">    <span class="keyword">return</span> b, a</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(swap(<span class="number">1</span>, <span class="number">2</span>))          <span class="comment"># 输出: (2, 1)  —— T 被推断为 int</span></span><br><span class="line"><span class="built_in">print</span>(swap(<span class="string">&quot;hi&quot;</span>, <span class="string">&quot;bye&quot;</span>))   <span class="comment"># 输出: (&#x27;bye&#x27;, &#x27;hi&#x27;)  —— T 被推断为 str</span></span><br></pre></td></tr></table></figure><ul><li>T 可以是任何类型（int、str、float…）</li></ul><h4 id="generic"><a class="markdownIt-Anchor" href="#generic"></a> Generic</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, <span class="type">Generic</span></span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">&#x27;T&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>(<span class="type">Generic</span>[T]):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, content: T</span>):</span><br><span class="line">        self.content = content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>) -&gt; T:</span><br><span class="line">        <span class="keyword">return</span> self.content</span><br><span class="line"></span><br><span class="line">int_box = Box </span><br><span class="line"><span class="built_in">print</span>(int_box.get())  <span class="comment"># 输出: 123</span></span><br><span class="line"></span><br><span class="line">str_box = Box[<span class="built_in">str</span>](<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str_box.get())  <span class="comment"># 输出: hello</span></span><br></pre></td></tr></table></figure><ul><li><code>Box[T]</code> 表示这是一个“存放任意类型 T 的盒子”</li><li><code>Generic[T]</code> 表示类是“泛型类”</li></ul><h4 id="any"><a class="markdownIt-Anchor" href="#any"></a> Any</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_anything</span>(<span class="params">x: <span class="type">Any</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received: <span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">print_anything(<span class="number">42</span>)            <span class="comment"># int</span></span><br><span class="line">print_anything(<span class="string">&quot;hello&quot;</span>)       <span class="comment"># str</span></span><br><span class="line">print_anything([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])     <span class="comment"># list</span></span><br></pre></td></tr></table></figure><ul><li>Any 表示函数接受任何类型的数据</li></ul><h3 id="结构化和协议"><a class="markdownIt-Anchor" href="#结构化和协议"></a> 结构化和协议</h3><table><thead><tr><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Protocol</td><td>定义接口或行为协议（Python 3.8+）</td></tr><tr><td>TypedDict</td><td>类似 dict 的结构化类型注解</td></tr><tr><td>NamedTuple</td><td>类型注解版本的命名元组</td></tr><tr><td>dataclass</td><td>与 @dataclass 一起使用可以加注解</td></tr><tr><td>例如：</td><td></td></tr></tbody></table><h4 id="typeddict"><a class="markdownIt-Anchor" href="#typeddict"></a> TypedDict</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    is_active: <span class="built_in">bool</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">user: User</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hello, <span class="subst">&#123;user[<span class="string">&#x27;name&#x27;</span>]&#125;</span>!&quot;</span></span><br><span class="line"></span><br><span class="line">u = &#123;<span class="string">&quot;id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;is_active&quot;</span>: <span class="literal">True</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(greet(u))  <span class="comment"># 输出: Hello, Alice!</span></span><br></pre></td></tr></table></figure><ul><li>明确了 user 必须包含哪些字段</li><li>静态检查工具（如 mypy）可以发现拼写错误或字段缺失</li></ul><h4 id="protocol"><a class="markdownIt-Anchor" href="#protocol"></a> Protocol</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Protocol</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Reader</span>(<span class="title class_ inherited__">Protocol</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileReader</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;data from file&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dummy</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test data&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">r: Reader</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> r.read()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(load(FileReader()))  <span class="comment"># 输出: data from file</span></span><br><span class="line"><span class="built_in">print</span>(load(Dummy()))       <span class="comment"># 输出: test data</span></span><br></pre></td></tr></table></figure><p>当你只关心某个对象是否有某些方法或属性（而不是它的具体类型），使用 Protocol 可以定义“接口”，实现 Python 的“结构子类型检查”。</p><ul><li>load() 不关心对象的真实类型，只要有 .read() 方法就行</li><li>非侵入式，“只要像鸭子，它就能飞”（典型的 duck typing）</li></ul><h4 id="dataclasses"><a class="markdownIt-Anchor" href="#dataclasses"></a> dataclasses</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    is_active: <span class="built_in">bool</span> = <span class="literal">True</span>  <span class="comment"># 可以设置默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化</span></span><br><span class="line">u = User(<span class="built_in">id</span>=<span class="number">1</span>, name=<span class="string">&quot;Alice&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(u)  <span class="comment"># 输出: User(id=1, name=&#x27;Alice&#x27;, is_active=True)</span></span><br></pre></td></tr></table></figure><ul><li>自动生成了 <strong>init</strong>() 方法</li><li>自动实现了 <strong>repr</strong>() 和 <strong>eq</strong>() 等方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass(<span class="params">order=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span>:</span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">p1 = Product(<span class="number">19.9</span>, <span class="string">&quot;A&quot;</span>)</span><br><span class="line">p2 = Product(<span class="number">29.9</span>, <span class="string">&quot;B&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p1 &lt; p2)  <span class="comment"># True，按字段顺序比较（先比 price）</span></span><br></pre></td></tr></table></figure><ul><li>支持比较大小</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass, field</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Token</span>:</span><br><span class="line">    value: <span class="built_in">str</span></span><br><span class="line">    secret: <span class="built_in">str</span> = field(<span class="built_in">repr</span>=<span class="literal">False</span>, compare=<span class="literal">False</span>)  <span class="comment"># 不显示、也不参与比较</span></span><br><span class="line"></span><br><span class="line">t1 = Token(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;secret123&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t1)  <span class="comment"># 输出: Token(value=&#x27;abc&#x27;)</span></span><br></pre></td></tr></table></figure><p>忽略某个字段：field(repr=False, compare=False, default=…)</p><h3 id="特殊类型工具"><a class="markdownIt-Anchor" href="#特殊类型工具"></a> 特殊类型工具</h3><table><thead><tr><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>NewType</td><td>定义新的类型别名，例如：UserId = NewType(‘UserId’, int)</td></tr><tr><td>Type</td><td>类对象的类型，例如 Type[BaseClass]</td></tr><tr><td>Self</td><td>指代自身（Python 3.11+）</td></tr><tr><td>例如：</td><td></td></tr></tbody></table><h4 id="newtype"><a class="markdownIt-Anchor" href="#newtype"></a> NewType</h4><p>创建“伪新类型”，用于静态类型区分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> NewType</span><br><span class="line"></span><br><span class="line">UserId = NewType(<span class="string">&#x27;UserId&#x27;</span>, <span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_name</span>(<span class="params">user_id: UserId</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;User#<span class="subst">&#123;user_id&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">get_user_name(UserId(<span class="number">123</span>))  <span class="comment"># ✅ 正确</span></span><br><span class="line"><span class="comment"># get_user_name(123)        # ❌ mypy 会报错：需要 UserId，而不是 int</span></span><br></pre></td></tr></table></figure><h4 id="type"><a class="markdownIt-Anchor" href="#type"></a> Type</h4><p><code>Type[T]</code> 接收一个类对象（而不是实例）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Woof!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_animal</span>(<span class="params">animal_cls: <span class="type">Type</span>[Animal]</span>) -&gt; Animal:</span><br><span class="line">    <span class="keyword">return</span> animal_cls()</span><br><span class="line"></span><br><span class="line">a = make_animal(Dog)  <span class="comment"># ✅ 传类不是传对象</span></span><br><span class="line"><span class="built_in">print</span>(a.speak())      <span class="comment"># Woof!</span></span><br></pre></td></tr></table></figure><ul><li><code>Type[Animal]</code> 表示“Animal 的子类”，不是实例。</li></ul><h4 id="selfpython-311"><a class="markdownIt-Anchor" href="#selfpython-311"></a> Self(Python 3.11+)</h4><p>用于方法返回当前类类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Self</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Builder</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; Self:</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_age</span>(<span class="params">self, age: <span class="built_in">int</span></span>) -&gt; Self:</span><br><span class="line">        self.age = age</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">b = Builder().set_name(<span class="string">&quot;Alice&quot;</span>).set_age(<span class="number">30</span>)</span><br></pre></td></tr></table></figure><ul><li>Self 解决了链式调用返回类型难以表达的问题。</li><li>自动适配子类返回自身，无需硬编码类名。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用typing增强Python代码的可读性、可维护性，并帮助静态分析工具进行错误检查。&lt;/p&gt;</summary>
    
    
    
    <category term="编程学习-Python" scheme="https://atffang.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-Python/"/>
    
    
  </entry>
  
  <entry>
    <title>不要用危险的字符拼接sql查询</title>
    <link href="https://atffang.github.io/2025/05/16/%E4%B8%8D%E8%A6%81%E7%94%A8%E5%8D%B1%E9%99%A9%E7%9A%84%E5%AD%97%E7%AC%A6%E6%8B%BC%E6%8E%A5sql%E6%9F%A5%E8%AF%A2/"/>
    <id>https://atffang.github.io/2025/05/16/%E4%B8%8D%E8%A6%81%E7%94%A8%E5%8D%B1%E9%99%A9%E7%9A%84%E5%AD%97%E7%AC%A6%E6%8B%BC%E6%8E%A5sql%E6%9F%A5%E8%AF%A2/</id>
    <published>2025-05-16T02:38:11.000Z</published>
    <updated>2025-05-16T02:49:44.281Z</updated>
    
    <content type="html"><![CDATA[<p>解决 SQL 注入问题，在于不去拼接字符串构造 SQL，而是使用“预编译 + 参数绑定”的方式（即参数化查询）来处理 SQL 请求。抑或是使用ORM。</p><span id="more"></span><p><strong>什么是 SQL 注入？</strong></p><p>SQL 注入（SQL Injection）是指攻击者通过构造恶意输入，插入到 SQL 查询语句中，从而<strong>操控数据库</strong>执行非预期的操作，如绕过登录、删除数据等。<br />例如：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名：&quot;</span>)</span><br><span class="line">sql = <span class="string">&quot;SELECT * FROM users WHERE username = &#x27;&quot;</span> + username + <span class="string">&quot;&#x27;;&quot;</span></span><br></pre></td></tr></table></figure><p>当用户输入 <code>admin' OR '1'='1</code> 时，SQL 变成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE username = <span class="string">&#x27;admin&#x27;</span> OR <span class="string">&#x27;1&#x27;</span>=<span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这会导致永远为真，绕过认证。</p><h3 id="解决方案1预编译参数绑定prepared-statements"><a class="markdownIt-Anchor" href="#解决方案1预编译参数绑定prepared-statements"></a> 解决方案1：预编译+参数绑定（Prepared Statements）</h3><p>将 SQL 语句结构提前固定好，<strong>只在后续绑定参数，而不是拼接字符串</strong>，数据库系统会提前“准备”好 SQL 的执行计划。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"></span><br><span class="line">conn = psycopg2.connect(database=<span class="string">&quot;testdb&quot;</span>, user=<span class="string">&quot;postgres&quot;</span>, password=<span class="string">&quot;yourpassword&quot;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户输入</span></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ✅ 安全的方式：参数化查询，防止SQL注入</span></span><br><span class="line">sql = <span class="string">&quot;SELECT * FROM users WHERE username = %s;&quot;</span></span><br><span class="line">cursor.execute(sql, (username,))  <span class="comment"># 第二个参数是 tuple，即使用户输入恶意内容也不会被执行为SQL代码</span></span><br><span class="line"></span><br><span class="line">rows = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(rows)</span><br></pre></td></tr></table></figure><p>这里的 %s 是占位符，(username,) 是绑定参数。<strong>PostgreSQL 会自动对输入内容进行转义和类型处理</strong>，用户输入的内容只会当作“数据”，不会被解释为 SQL 代码。</p><h3 id="解决方案2-ormobject-relational-mapping"><a class="markdownIt-Anchor" href="#解决方案2-ormobject-relational-mapping"></a> 解决方案2: ORM（Object-Relational Mapping）</h3><p><strong>ORM 是一种将数据库表映射为程序中的对象</strong> 的工具，它允许你用“面向对象的方式”来操作数据库，而不是手写 SQL。</p><p>优点包括：</p><ul><li>代码更简洁、抽象</li><li>更容易维护和迁移数据库</li><li>内置 <strong>参数化查询机制</strong>，天然避免 SQL 注入</li></ul><p>一个python+postgresql的简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, declarative_base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line">engine = create_engine(<span class="string">&quot;postgresql://postgres:yourpassword@localhost/testdb&quot;</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">session = Session()</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个 User 模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = Column(String)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询一个用户（安全）</span></span><br><span class="line">username_input = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名：&quot;</span>)</span><br><span class="line">user = session.query(User).<span class="built_in">filter</span>(User.username == username_input).first()</span><br><span class="line"><span class="built_in">print</span>(user)</span><br></pre></td></tr></table></figure><p>当然，orm实际上更有益于我们进行数据库控制，即增删改查等操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, declarative_base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库连接设置（请修改为你的实际用户名、密码和数据库名）</span></span><br><span class="line">engine = create_engine(<span class="string">&quot;postgresql://postgres:yourpassword@localhost/testdb&quot;</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 ORM 基类</span></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 User 模型（对应 users 表）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = Column(String)</span><br><span class="line">    email = Column(String)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表（如果尚不存在）</span></span><br><span class="line">Base.metadata.create_all(engine)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- 增（Insert） ----------</span></span><br><span class="line">new_user = User(username=<span class="string">&quot;alice&quot;</span>, email=<span class="string">&quot;alice@example.com&quot;</span>)</span><br><span class="line">session.add(new_user)</span><br><span class="line">session.commit()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;插入用户 ID：<span class="subst">&#123;new_user.<span class="built_in">id</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- 查（Query） ----------</span></span><br><span class="line"><span class="comment"># 查询所有用户</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;所有用户：&quot;</span>)</span><br><span class="line">users = session.query(User).<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">    <span class="built_in">print</span>(user.<span class="built_in">id</span>, user.username, user.email)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询特定用户</span></span><br><span class="line">user = session.query(User).<span class="built_in">filter</span>(User.username == <span class="string">&quot;alice&quot;</span>).first()</span><br><span class="line"><span class="keyword">if</span> user:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;找到用户：&quot;</span>, user.username, user.email)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- 改（Update） ----------</span></span><br><span class="line"><span class="keyword">if</span> user:</span><br><span class="line">    user.email = <span class="string">&quot;alice_updated@example.com&quot;</span></span><br><span class="line">    session.commit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;已更新用户邮箱：&quot;</span>, user.email)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- 删（Delete） ----------</span></span><br><span class="line"><span class="keyword">if</span> user:</span><br><span class="line">    session.delete(user)</span><br><span class="line">    session.commit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;已删除用户：&quot;</span>, user.username)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- 关闭会话 ----------</span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;解决 SQL 注入问题，在于不去拼接字符串构造 SQL，而是使用“预编译 + 参数绑定”的方式（即参数化查询）来处理 SQL 请求。抑或是使用ORM。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>geohash与geotree</title>
    <link href="https://atffang.github.io/2025/05/10/geohash%E4%B8%8Egeotree/"/>
    <id>https://atffang.github.io/2025/05/10/geohash%E4%B8%8Egeotree/</id>
    <published>2025-05-10T15:50:09.000Z</published>
    <updated>2025-05-11T14:32:48.908Z</updated>
    
    <content type="html"><![CDATA[<p>介绍一下geohash与geotree</p><span id="more"></span><h3 id="geohash"><a class="markdownIt-Anchor" href="#geohash"></a> Geohash</h3><p><strong>Geohash</strong> 是一种将二维地理坐标（经度 Longitude 和 纬度 Latitude）编码为一个可排序的字符串的空间索引方法。由 Gustavo Niemeyer 于 2008 年提出，并被广泛用于分布式地理数据索引、近邻搜索、区域聚合等场景。</p><p>核心特征为：</p><ul><li>编码结果是<strong>Base32 字符串</strong></li><li>字符越多，<strong>空间精度越高</strong></li><li>相近位置编码字符串有<strong>公共前缀</strong></li></ul><h4 id="geohash-编码原理"><a class="markdownIt-Anchor" href="#geohash-编码原理"></a> Geohash 编码原理</h4><p>Geohash 使用<strong>经纬度交替二分</strong>的方式，将整个地球的经纬度范围不断缩小，直到定位到目标点。过程主要分为以下 4 步：</p><p><strong>步骤 1：初始化经纬度范围</strong></p><ul><li>经度范围 lon_range = [-180, 180]</li><li>纬度范围 lat_range = [-90, 90]</li></ul><p><strong>步骤 2：交替二分编码，生成二进制序列</strong><br />使用**二分法（Binary Search）**编码纬度和经度：</p><ul><li>从经度开始（偶数位处理经度，奇数位处理纬度）</li><li>每次比较当前坐标是否大于区间中点，如果是，记为 1，否则为 0</li><li>并更新范围（左/右半区）<br />这个过程交替进行直到你得到足够数量的位，比如 5 位 * 7 字符 = 35 位。</li></ul><p><strong>步骤 3：每 5 位为一组，转为十进制索引</strong><br />将所得的长二进制串，<strong>每 5 位一组</strong>，转为十进制，然后用 Base32 映射表替换。</p><p><strong>步骤 4：生成最终字符串</strong><br />每 5 位 → 1 个字符，共 n 个字符（通常精度为 6~9 个字符）。</p><h4 id="geohash优点"><a class="markdownIt-Anchor" href="#geohash优点"></a> Geohash优点</h4><p><strong>1.</strong> <strong>支持空间邻近查询</strong></p><ul><li>Geohash 编码相邻的区域通常具有<strong>相似前缀</strong>，适合使用前缀匹配（如 LIKE ‘wx4g0%’）实现快速范围查询。</li><li>特别适合在数据库中对空间对象做索引。</li></ul><p><strong>2.</strong>  <strong>分级精度（多级网格）</strong></p><ul><li>编码长度越长，表示区域越小，精度越高。</li><li>可动态控制精度，适合不同缩放层级的空间分析。</li></ul><p><strong>3.</strong>  <strong>文本存储，易于索引</strong></p><ul><li>Geohash 是字符串格式，便于存储、索引（B-Tree、Trie）、压缩和分布式传输。</li></ul><p><strong>4.</strong> <strong>无依赖的数据结构</strong></p><ul><li>不依赖复杂的空间数据结构（如 R-Tree、QuadTree），适用于轻量级地理索引服务。</li></ul><p><strong>5.</strong> <strong>适合分布式系统</strong></p><ul><li>Geohash 可直接用于 Sharding，例如前缀作为分片 key，天然适配大数据平台如 HBase、Elasticsearch。</li></ul><h4 id="geohash的不足"><a class="markdownIt-Anchor" href="#geohash的不足"></a> Geohash的不足</h4><p><strong>1.</strong> <strong>经纬度不均匀映射</strong></p><ul><li>纬度范围 [-90, 90]，经度 [-180, 180]，导致赤道附近一个 Geohash 单元的面积大于极地。</li><li>地球是球体，Geohash 假设平面映射，有畸变。</li></ul><p><strong>2.</strong>  <strong>边界误差问题</strong></p><ul><li>相邻的两个地理位置如果落在不同的 Geohash 网格单元中，会出现<strong>编码前缀差异</strong>，影响邻近判断。</li><li>需要额外处理“邻居格子”。</li></ul><p><strong>3.</strong> <strong>形状不规则</strong></p><ul><li>Geohash 网格在地图上是<strong>长方形</strong>而非正方形，且每一级的比例不均一，查询时常需额外扩大范围。</li></ul><p><strong>4.</strong>  <strong>二维信息压缩成一维有信息损失</strong></p><ul><li>经纬度交替合并会丢失部分空间关系（例如正方形邻域判断更复杂）。</li></ul><p><strong>5.</strong> <strong>精度和效率权衡</strong></p><ul><li>长 Geohash 字符串意味着更高精度，但也带来索引增长和性能损耗问题。</li></ul><p>总的来说，Geohash 是一种优雅的地理编码方案，它以轻量、易索引的方式，在现代数据库和分布式系统中广泛应用。然而，在面对高精度、复杂空间关系时，它也暴露出一定的局限性。因此，在实际使用中，应结合业务需求，评估其合适性，并配合如邻接格补全、R-Tree 等技术优化空间查询性能。</p><h3 id="geotree"><a class="markdownIt-Anchor" href="#geotree"></a> GeoTree</h3><p><strong>GeoTree</strong> 是一种基于空间层级划分的地理编码体系，它将地球表面按不同层级进行规则划分，并通过编码的方式表达空间单元的层级和位置关系。相比 Geohash 等网格编码，GeoTree 更强调“树结构”和“地理拓扑”的结合，适用于需要空间聚合、路径查询、空间层次建模的应用场景。</p><p>GeoTree 的思想与四叉树（QuadTree）类似，但更灵活，支持<strong>多尺度编码</strong>与<strong>空间父子继承关系表达</strong>，广泛用于如地空一体化管理、空域划分、地理分区治理等空间应用。</p><h4 id="核心特征"><a class="markdownIt-Anchor" href="#核心特征"></a> <strong>核心特征：</strong></h4><ul><li>每个节点表示一个空间区域，节点 ID 为<strong>可排序的字符串或整数</strong></li><li>子区域编码在父编码基础上扩展（<strong>继承性编码</strong>）</li><li>层级结构清晰，便于表示“包含关系”和<strong>层次聚合</strong></li><li>支持<strong>三维空间索引</strong>（经度、纬度、高度）</li></ul><h4 id="geotree-编码原理"><a class="markdownIt-Anchor" href="#geotree-编码原理"></a> <strong>GeoTree 编码原理</strong></h4><p>GeoTree 并非采用经纬度交替压缩为二进制，而是按照空间网格划分规则，分层递归构建编码。过程一般如下：<br /><strong>步骤 1：定义根层空间范围（Level 0）</strong></p><ul><li>将地球划分为若干大格（如全球 8 区或全球 6 面体）</li><li>每个大格分配一个唯一编码（如 “1”、“A”、“R0”）</li></ul><p><strong>步骤 2：递归划分子区域（Level 1~n）</strong></p><ul><li>每个区域根据固定或可变规则继续划分为子区域（如 4 等分、9 等分、3D 立方等）</li><li>子区域编码在父编码基础上追加子代标识（如 “1-3” 表示根节点 1 的第 3 个子区）</li></ul><p><strong>步骤 3：形成空间编码树</strong></p><ul><li>所有区域构成一棵空间树：根为地球、分支为区域、叶子为最小单元</li><li>编码如 A-1-2-0 表示：区域 A → 子区 1 → 子区 2 → 子区 0</li></ul><p><strong>步骤 4：支持三维编码（可选）</strong></p><ul><li>对于需要高空建模的场景，每层子区可增加“高度切分”，编码如：A-1-2-0-H2</li></ul><h4 id="geotree-的优势"><a class="markdownIt-Anchor" href="#geotree-的优势"></a> <strong>GeoTree 的优势</strong></h4><p><strong>1.</strong>  <strong>天然支持空间层次结构</strong></p><ul><li>每个编码天然携带层级信息，如 A-2-3 表示第 2 层、第 3 区</li><li>支持区域归属、包含、父子导航等空间树操作</li></ul><p><strong>2.</strong> <strong>邻接关系明确，便于空间合并</strong></p><ul><li>可快速判断相邻区域是否有共同父节点，从而实现区域合并、聚合分析</li></ul><p><strong>3.</strong> <strong>便于多尺度查询</strong></p><ul><li>查询精度可控制在某一层级，例如只查询第 3 层的所有编码</li></ul><p><strong>4.</strong> <strong>编码形式灵活</strong></p><ul><li>可以使用字符串（如 “E-3-1”）或整型编码（如位运算 0b010101）支持高效索引</li></ul><p><strong>5.</strong> <strong>支持三维空间编码</strong></p><ul><li>除经纬度之外，GeoTree 可扩展高度维度，适用于低空空域、建筑分层、空间管网等场景</li></ul><p><strong>6.</strong> <strong>更强的空间拓扑表达能力</strong></p><ul><li>相比 Geohash 的“前缀相似”，GeoTree 明确建模空间父子关系，有助于空间推理和规划控制</li></ul><h4 id="geotree-的不足"><a class="markdownIt-Anchor" href="#geotree-的不足"></a> <strong>GeoTree 的不足</strong></h4><p><strong>1.</strong> <strong>空间分区规则需自定义</strong></p><ul><li>没有标准化的编码划分规则，不同业务可能用不同树型划分方式</li></ul><p><strong>2.</strong> <strong>区域形状不规则</strong></p><ul><li>编码背后代表的空间单元可能非正方形（视分割策略），可能导致某些计算复杂</li></ul><p><strong>3.</strong> <strong>实现成本略高</strong></p><ul><li>相比 Geohash 纯字符串压缩，GeoTree 需要维护树结构、支持路径解析和层级操作</li></ul><p><strong>4.</strong> <strong>邻接格查找略繁琐</strong></p><ul><li>查找空间邻居不像 Geohash 可以通过简单变换字符实现，而需要访问同层兄弟节点</li></ul><p>GeoTree 是一种<strong>结构化、层级化、拓扑清晰的地理编码体系</strong>，它从空间组织结构出发，更适合表达“地理分区与归属”这一类场景。在复杂区域管理、空间权限控制、多尺度数据建模等领域，比 Geohash 更具表达力。<br />然而，由于 GeoTree 没有统一标准实现，初始设计需结合业务规则规划编码体系。在面向大规模分布式查询的场景下，GeoTree 可与 Geohash 等轻量编码联合使用，取长补短，实现高效、结构清晰的空间信息处理。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍一下geohash与geotree&lt;/p&gt;</summary>
    
    
    
    <category term="空间分析与GIS算法" scheme="https://atffang.github.io/categories/%E7%A9%BA%E9%97%B4%E5%88%86%E6%9E%90%E4%B8%8EGIS%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Python中的闭包</title>
    <link href="https://atffang.github.io/2025/05/09/Python%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/"/>
    <id>https://atffang.github.io/2025/05/09/Python%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/</id>
    <published>2025-05-09T02:39:33.000Z</published>
    <updated>2025-05-09T03:06:18.554Z</updated>
    
    <content type="html"><![CDATA[<p>Python中的闭包机制简介</p><span id="more"></span><h3 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h3><p>闭包（<strong>Closure</strong>）是 Python 中一个非常重要且常用的概念，它是函数式编程的核心特性之一。闭包是一个函数，它“记住”了它被创建时的环境，即使在其环境之外被调用，这些变量仍然可用。换句话说：<strong>一个函数返回了另一个函数，这个返回的函数引用了其外部函数的变量</strong>，这个内部函数就是一个闭包。</p><p><strong>闭包的三个必要条件</strong>：</p><ol><li><strong>嵌套函数</strong>：函数内部定义了另一个函数；</li><li><strong>内部函数引用了外部函数的变量（自由变量）</strong>；</li><li><strong>外部函数返回了内部函数</strong>。</li></ol><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">y</span>):</span><br><span class="line">        <span class="keyword">return</span> x + y  <span class="comment"># inner 使用了 outer 的变量 x</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">f = outer(<span class="number">10</span>)  <span class="comment"># outer 返回了 inner 函数</span></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">5</span>))    <span class="comment"># 输出 15，等于 10 + 5</span></span><br></pre></td></tr></table></figure><p>每当函数内部引用了外部作用域的变量时，Python 会将这些变量“捕获”并保存在闭包中。<br />我们可以用函数的 <strong>closure</strong> 属性查看闭包中存储的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(f.__closure__[<span class="number">0</span>].cell_contents)  <span class="comment"># 输出 10</span></span><br></pre></td></tr></table></figure><h3 id="usage"><a class="markdownIt-Anchor" href="#usage"></a> Usage</h3><h4 id="数据隐藏类似于私有变量"><a class="markdownIt-Anchor" href="#数据隐藏类似于私有变量"></a> 数据隐藏（类似于私有变量）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_counter</span>():</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">counter</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line"></span><br><span class="line">c1 = make_counter()</span><br><span class="line"><span class="built_in">print</span>(c1())  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(c1())  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">c2 = make_counter()</span><br><span class="line"><span class="built_in">print</span>(c2())  <span class="comment"># 1（新的闭包）</span></span><br></pre></td></tr></table></figure><p>如果你在一个函数内定义了另一个函数（形成闭包），而你想<strong>在内部函数中修改外部函数的变量</strong>，就需要用 nonlocal 来声明这个变量。nonlocal 是 Python 3 中引入的一个关键字，用于在<strong>嵌套函数中声明一个变量不是局部变量</strong>，而是来自于<strong>最近一层的外部（非全局）作用域</strong>。</p><h4 id="回调函数"><a class="markdownIt-Anchor" href="#回调函数"></a> 回调函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_multiplier</span>(<span class="params">factor</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="keyword">return</span> n * factor</span><br><span class="line">    <span class="keyword">return</span> multiply</span><br><span class="line"></span><br><span class="line">double = make_multiplier(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(double(<span class="number">10</span>))  <span class="comment"># 20</span></span><br></pre></td></tr></table></figure><h4 id="函数工厂"><a class="markdownIt-Anchor" href="#函数工厂"></a> 函数工厂</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">power_factory</span>(<span class="params">exp</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> x ** exp</span><br><span class="line">    <span class="keyword">return</span> power</span><br><span class="line"></span><br><span class="line">square = power_factory(<span class="number">2</span>)</span><br><span class="line">cube = power_factory(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(square(<span class="number">5</span>))  <span class="comment"># 25</span></span><br><span class="line"><span class="built_in">print</span>(cube(<span class="number">2</span>))    <span class="comment"># 8</span></span><br></pre></td></tr></table></figure><h4 id="装饰器的本质也是闭包"><a class="markdownIt-Anchor" href="#装饰器的本质也是闭包"></a> 装饰器的本质也是闭包！</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Before function call&quot;</span>)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;After function call&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello, <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">greet(<span class="string">&quot;Alice&quot;</span>)</span><br></pre></td></tr></table></figure><p>进一步的，我们可以使用装饰器来为函数计时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()  <span class="comment"># 开始时间</span></span><br><span class="line">        result = func(*args, **kwargs)  <span class="comment"># 调用被装饰的函数</span></span><br><span class="line">        end = time.time()  <span class="comment"># 结束时间</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;函数 `<span class="subst">&#123;func.__name__&#125;</span>` 运行耗时：<span class="subst">&#123;end - start:<span class="number">.6</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">slow_function</span>():</span><br><span class="line">    time.sleep(<span class="number">2</span>)  <span class="comment"># 模拟耗时操作</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;任务完成&quot;</span>)</span><br><span class="line"></span><br><span class="line">slow_function()</span><br></pre></td></tr></table></figure><p>再进一步的，我们对装饰器进行增强，使其能够同时实现：</p><ul><li>✅ 打印日志（函数名称和参数）</li><li>⏱ 计时执行时间</li><li>⚠️ 自动捕获异常并打印错误信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_timer_exception</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[LOG] 正在调用函数 `<span class="subst">&#123;func.__name__&#125;</span>`&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[LOG] 参数: args=<span class="subst">&#123;args&#125;</span>, kwargs=<span class="subst">&#123;kwargs&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[ERROR] 函数 `<span class="subst">&#123;func.__name__&#125;</span>` 执行出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            result = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[LOG] 函数 `<span class="subst">&#123;func.__name__&#125;</span>` 返回结果: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            end_time = time.time()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[TIME] 函数 `<span class="subst">&#123;func.__name__&#125;</span>` 执行耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.6</span>f&#125;</span> 秒\n&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@log_timer_exception</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line"></span><br><span class="line"><span class="meta">@log_timer_exception</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep_task</span>(<span class="params">seconds</span>):</span><br><span class="line">    time.sleep(seconds)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;休眠 <span class="subst">&#123;seconds&#125;</span> 秒完成&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">divide(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">divide(<span class="number">10</span>, <span class="number">0</span>)  <span class="comment"># 除零错误</span></span><br><span class="line"></span><br><span class="line">sleep_task(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[LOG] 正在调用函数 `divide`</span><br><span class="line">[LOG] 参数: args=(10, 2), kwargs=&#123;&#125;</span><br><span class="line">[LOG] 函数 `divide` 返回结果: 5.0</span><br><span class="line">[TIME] 函数 `divide` 执行耗时: 0.000002 秒</span><br><span class="line"></span><br><span class="line">[LOG] 正在调用函数 `divide`</span><br><span class="line">[LOG] 参数: args=(10, 0), kwargs=&#123;&#125;</span><br><span class="line">[ERROR] 函数 `divide` 执行出错: division by zero</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line">[TIME] 函数 `divide` 执行耗时: 0.000004 秒</span><br></pre></td></tr></table></figure><h4 id="闭包lamba表达式"><a class="markdownIt-Anchor" href="#闭包lamba表达式"></a> 闭包+lamba表达式</h4><p>lambda 常用于创建简单闭包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_adder</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> y: x + y</span><br><span class="line"></span><br><span class="line">add5 = make_adder(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(add5(<span class="number">3</span>))  <span class="comment"># 8</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python中的闭包机制简介&lt;/p&gt;</summary>
    
    
    
    <category term="编程学习-Python" scheme="https://atffang.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-Python/"/>
    
    
  </entry>
  
  <entry>
    <title>工厂函数与工厂方法</title>
    <link href="https://atffang.github.io/2025/05/09/%E5%B7%A5%E5%8E%82%E5%87%BD%E6%95%B0/"/>
    <id>https://atffang.github.io/2025/05/09/%E5%B7%A5%E5%8E%82%E5%87%BD%E6%95%B0/</id>
    <published>2025-05-09T01:51:56.000Z</published>
    <updated>2025-05-09T03:16:35.605Z</updated>
    
    <content type="html"><![CDATA[<p>本文以python为例，简单介绍工厂函数。</p><span id="more"></span><h3 id="工厂函数"><a class="markdownIt-Anchor" href="#工厂函数"></a> 工厂函数</h3><p>工厂函数（Factory Function）是一种常见的设计模式，尤其适用于面向对象编程和函数式编程场景中，用来 <strong>动态创建对象</strong> 或 <strong>封装复杂初始化逻辑</strong>。</p><h4 id="definition"><a class="markdownIt-Anchor" href="#definition"></a> Definition</h4><p>工厂函数本质上是一个<strong>返回对象的函数</strong>，而不是类的构造函数（<strong>init</strong>）。它根据传入的参数决定返回什么类型或配置的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">animal_factory</span>(<span class="params">animal_type</span>):</span><br><span class="line">    <span class="keyword">if</span> animal_type == <span class="string">&quot;dog&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> Dog()</span><br><span class="line">    <span class="keyword">elif</span> animal_type == <span class="string">&quot;cat&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> Cat()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Unknown animal type&quot;</span>)</span><br></pre></td></tr></table></figure><p>工厂函数的优势在于：</p><ol><li><strong>封装复杂逻辑</strong>：隐藏创建对象所需的复杂初始化步骤；</li><li><strong>运行时类型决定</strong>：可以在运行时根据参数决定返回何种子类；</li><li><strong>返回同一类的多个变种</strong>：支持不同配置、不同状态的实例；</li><li><strong>替代类继承</strong>：在某些函数式编程场景中，不用类继承，也可以通过工厂函数生成封装好的行为；</li><li><strong>支持缓存或单例</strong>：结合缓存机制（比如字典）可复用实例。</li></ol><h4 id="usage"><a class="markdownIt-Anchor" href="#usage"></a> Usage</h4><p>数据库连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MySQLConnection</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MySQL connected&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PostgreSQLConnection</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;PostgreSQL connected&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db_connection_factory</span>(<span class="params">db_type</span>):</span><br><span class="line">    <span class="keyword">if</span> db_type == <span class="string">&quot;mysql&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> MySQLConnection()</span><br><span class="line">    <span class="keyword">elif</span> db_type == <span class="string">&quot;postgres&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> PostgreSQLConnection()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Unsupported DB type&quot;</span>)</span><br><span class="line"></span><br><span class="line">conn = db_connection_factory(<span class="string">&quot;mysql&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(conn.connect())  <span class="comment"># 输出: MySQL connected</span></span><br></pre></td></tr></table></figure><p>工厂函数封装初始化参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_logger</span>(<span class="params">log_type=<span class="string">&quot;file&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> log_type == <span class="string">&quot;file&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> msg: <span class="built_in">print</span>(<span class="string">f&quot;[FILE] <span class="subst">&#123;datetime.now()&#125;</span>: <span class="subst">&#123;msg&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> log_type == <span class="string">&quot;console&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> msg: <span class="built_in">print</span>(<span class="string">f&quot;[CONSOLE] <span class="subst">&#123;datetime.now()&#125;</span>: <span class="subst">&#123;msg&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Unknown log type&quot;</span>)</span><br><span class="line"></span><br><span class="line">logger = create_logger(<span class="string">&quot;console&quot;</span>)</span><br><span class="line">logger(<span class="string">&quot;Something happened&quot;</span>)  <span class="comment"># 输出: [CONSOLE] 时间: Something happened</span></span><br></pre></td></tr></table></figure><p>结合缓存，返回单例或共享对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_instances = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">singleton_factory</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_instance</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> _instances:</span><br><span class="line">            _instances[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> _instances[cls]</span><br><span class="line">    <span class="keyword">return</span> get_instance</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton_factory</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Configuration</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.settings = &#123;&#125;</span><br><span class="line"></span><br><span class="line">config1 = Configuration()</span><br><span class="line">config2 = Configuration()</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> config1 <span class="keyword">is</span> config2</span><br></pre></td></tr></table></figure><h4 id="在类中使用工厂函数"><a class="markdownIt-Anchor" href="#在类中使用工厂函数"></a> 在类中使用工厂函数</h4><p>现在有一需求，我们想为每个宠物自动分配一个出生时间，给它一个独立的玩具箱（字典），这些值在每次创建时应该不同。<br />✅ 正确做法：使用<strong>default_factory</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass, field</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pet</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    kind: <span class="built_in">str</span>  <span class="comment"># &quot;cat&quot; or &quot;dog&quot;</span></span><br><span class="line">    born_time: datetime = field(default_factory=datetime.now)</span><br><span class="line">    toys: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>] = field(default_factory=<span class="built_in">dict</span>)  <span class="comment"># 玩具名 -&gt; 数量</span></span><br></pre></td></tr></table></figure><p><strong>field函数</strong>: 使用 field(default_factory=datetime.now) 表示：每次创建 Pet 实例时，都调用 datetime.now() 来自动生成时间戳（不是在类加载时就固定）。</p><p>field 是 Python dataclasses 模块中的一个函数，用来<strong>给类的属性定义更复杂的行为或默认值</strong>。default_factory 是 field() 函数的一个<strong>参数</strong>，它的作用是指定一个“工厂函数”，每次创建 dataclass 实例时调用它来生成字段的默认值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat = Pet(name=<span class="string">&quot;Mimi&quot;</span>, kind=<span class="string">&quot;cat&quot;</span>)</span><br><span class="line">dog = Pet(name=<span class="string">&quot;Doudou&quot;</span>, kind=<span class="string">&quot;dog&quot;</span>)</span><br><span class="line"></span><br><span class="line">cat.toys[<span class="string">&quot;ball&quot;</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cat.born_time)     <span class="comment"># 每个宠物自己的出生时间</span></span><br><span class="line"><span class="built_in">print</span>(dog.born_time)     <span class="comment"># 不同时间</span></span><br><span class="line"><span class="built_in">print</span>(dog.toys)          <span class="comment"># &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cat.toys <span class="keyword">is</span> dog.toys)  <span class="comment"># False ✅，玩具箱不共享</span></span><br></pre></td></tr></table></figure><p>❌ 错误示范：不使用default_factory，所有宠物共享玩具箱和出生时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BrokenPet</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    kind: <span class="built_in">str</span></span><br><span class="line">    born_time: datetime = datetime.now()  <span class="comment"># ❌ 类加载时固定</span></span><br><span class="line">    toys: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>] = &#123;&#125;             <span class="comment"># ❌ 所有宠物共享一套玩具</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat = BrokenPet(name=<span class="string">&quot;Mimi&quot;</span>, kind=<span class="string">&quot;cat&quot;</span>)</span><br><span class="line">dog = BrokenPet(name=<span class="string">&quot;Doudou&quot;</span>, kind=<span class="string">&quot;dog&quot;</span>)</span><br><span class="line"></span><br><span class="line">cat.toys[<span class="string">&quot;fish&quot;</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dog.toys)  <span class="comment"># ❌ &#123;&#x27;fish&#x27;: 1&#125;，狗和猫共用玩具箱</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cat.born_time == dog.born_time)  <span class="comment"># True ❌，出生时间完全相同</span></span><br></pre></td></tr></table></figure><p>有时人们会混淆<strong>类属性</strong>和<strong>实例属性</strong>，导致共享值错误！！！！</p><h3 id="工厂方法"><a class="markdownIt-Anchor" href="#工厂方法"></a> 工厂方法</h3><p><strong>厂方法模式（Factory Method Pattern</strong>本质是定义一个接口（抽象方法），让子类决定要实例化的类：</p><ul><li>是 GoF 的正式设计模式之一；</li><li>基于类继承；</li><li>通常用在面向对象的架构中；</li><li>Python中可以用 abc（抽象基类）来实现。</li></ul><p>一个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Woof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Meow&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 工厂方法基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnimalFactory</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_animal</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DogFactory</span>(<span class="title class_ inherited__">AnimalFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_animal</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Dog()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CatFactory</span>(<span class="title class_ inherited__">AnimalFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_animal</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Cat()</span><br><span class="line"></span><br><span class="line">factory = DogFactory()</span><br><span class="line">animal = factory.create_animal()</span><br><span class="line"><span class="built_in">print</span>(animal.speak())  <span class="comment"># 输出：Woof</span></span><br></pre></td></tr></table></figure><p>DogFactory 和 CatFactory 继承了 AnimalFactory，并各自实现了创建逻辑。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文以python为例，简单介绍工厂函数。&lt;/p&gt;</summary>
    
    
    
    <category term="编程学习-Python" scheme="https://atffang.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-Python/"/>
    
    
  </entry>
  
  <entry>
    <title>详解Python类的装饰器和魔法方法</title>
    <link href="https://atffang.github.io/2025/03/30/%E8%AF%A6%E8%A7%A3Python%E7%B1%BB%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%E5%92%8C%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/"/>
    <id>https://atffang.github.io/2025/03/30/%E8%AF%A6%E8%A7%A3Python%E7%B1%BB%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%E5%92%8C%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/</id>
    <published>2025-03-30T07:51:52.000Z</published>
    <updated>2025-05-09T02:58:08.496Z</updated>
    
    <content type="html"><![CDATA[<p>介绍一下Python类的装饰器和魔法方法，以及参数的下划线前缀</p><span id="more"></span><p>一个记性并不好的人将在工作中学习到的碎片化的知识统筹起来必须要依靠记录，非常不幸的是鄙人在记忆力不强的前提下依然没有良好的记录习惯，加之跑通万岁的实用主义，使得写的代码总是看起来比较低级而缺乏优雅的气息，与本人气质强烈不符。痛定思痛，痛改前非，先从一个相对基础但极其重要的机制开始记起：Python中类的装饰器与魔法方法。</p><h3 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h3><h4 id="类"><a class="markdownIt-Anchor" href="#类"></a> 类</h4><p>在 Python 中，类是面向对象编程（OOP）的核心概念，它用于定义对象的蓝图。类封装了数据（属性）和行为（方法），通过类可以创建多个具有相同结构的实例对象。通过使用类，代码可以更具组织性和模块化，易于扩展和维护。</p><p>在 Python 中定义一个基本的类非常简单，使用关键字 <code>class</code> 进行定义。以下是一个简单的类定义的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="comment"># 这是一个类属性</span></span><br><span class="line">    class_variable = <span class="string">&quot;I am a class variable&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这是初始化方法（构造函数），当类实例化时会自动调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="comment"># 这是实例属性</span></span><br><span class="line">        self.instance_variable = value</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这是一个实例方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">instance_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;This is an instance method and instance_variable is: <span class="subst">&#123;self.instance_variable&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这是一个类方法，使用 @classmethod 装饰器定义</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">class_method</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;This is a class method and class_variable is: <span class="subst">&#123;cls.class_variable&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这是一个静态方法，使用 @staticmethod 装饰器定义</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">static_method</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;This is a static method&quot;</span></span><br></pre></td></tr></table></figure><p>在上述代码中，展现了类的各个组成部分为：</p><ul><li><p><strong>类属性</strong>：</p><ul><li>类属性是类级别的属性，它们对于所有实例都是共享的。类属性通常定义在类体中，独立于任何方法。</li><li>在上例中，<code>class_variable</code> 就是一个类属性，所有对象共享同一个值。</li></ul></li><li><p><strong>实例属性</strong>：</p><ul><li>实例属性是在类的实例化过程中通过 <code>__init__()</code> 方法（也叫构造函数）动态创建的，每个实例有独立的属性值。</li><li>通过 <code>self.instance_variable = value</code>，我们为每个实例赋予不同的 <code>instance_variable</code> 值。</li></ul></li><li><p><strong>实例方法</strong>：</p><ul><li>实例方法是类中定义的普通方法，它们操作实例属性，且必须接受参数 <code>self</code>，<code>self</code> 代表的是实例本身。</li><li>实例方法通常用于定义对象的行为。</li></ul></li><li><p><strong>类方法</strong>：</p><ul><li>类方法是作用于类本身的方法，使用 <code>@classmethod</code> 装饰器定义。它接收 <code>cls</code> 参数，表示类对象，而不是实例对象。</li><li>类方法可以访问和修改类属性。</li></ul></li><li><p><strong>静态方法</strong>：</p><ul><li>静态方法是类中的方法，但它既不依赖类属性也不依赖实例属性。静态方法使用<code>@staticmethod</code> 装饰器定义，通常用于执行与类相关但不需要访问类或实例的逻辑。</li></ul></li></ul><p>通过实例化类，可以获得对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例化类，创建对象</span></span><br><span class="line">obj1 = MyClass(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">obj2 = MyClass(<span class="string">&quot;World&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>类</strong> 是抽象的模板，用于创建对象，它定义了对象的属性和行为。</li><li><strong>对象</strong> 是类的实例，每个对象都有自己独立的属性值和行为表现。</li></ul><h4 id="类的继承inheritance"><a class="markdownIt-Anchor" href="#类的继承inheritance"></a> 类的继承（Inheritance）</h4><p>继承是面向对象编程的核心概念之一，它允许一个类继承另一个类的属性和方法，从而避免代码重复，并能够对现有的类进行扩展。被继承的类称为<strong>父类（基类或超类）</strong>，继承的类称为<strong>子类（派生类）</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> makes a sound.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义子类，继承父类 Animal</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> barks.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> meows.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化子类</span></span><br><span class="line">dog = Dog(<span class="string">&quot;Buddy&quot;</span>)</span><br><span class="line">cat = Cat(<span class="string">&quot;Whiskers&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dog.speak())  <span class="comment"># 输出: Buddy barks.</span></span><br><span class="line"><span class="built_in">print</span>(cat.speak())  <span class="comment"># 输出: Whiskers meows.</span></span><br></pre></td></tr></table></figure><p>继承的特点：</p><ul><li>子类继承父类的所有属性和方法，并且可以<strong>重写</strong>（override）父类的方法。</li><li>可以通过 <code>super()</code> 调用父类的方法。</li><li>支持多重继承，子类可以从多个父类继承。</li></ul><h4 id="类的多态polymorphism"><a class="markdownIt-Anchor" href="#类的多态polymorphism"></a> 类的多态（Polymorphism）</h4><p>多态允许不同的类实现相同的方法，而表现出不同的行为。它是一种编程能力，能够让相同的接口对不同的数据类型做出不同的响应，具体行为由具体的对象来决定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&quot;Subclass must implement this method.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Woof!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Meow!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">animal_sound</span>(<span class="params">animal</span>):</span><br><span class="line">    <span class="built_in">print</span>(animal.speak())</span><br><span class="line"></span><br><span class="line">dog = Dog()</span><br><span class="line">cat = Cat()</span><br><span class="line"></span><br><span class="line">animal_sound(dog)  <span class="comment"># 输出: Woof!</span></span><br><span class="line">animal_sound(cat)  <span class="comment"># 输出: Meow!</span></span><br></pre></td></tr></table></figure><h4 id="抽象类abstract-class"><a class="markdownIt-Anchor" href="#抽象类abstract-class"></a> 抽象类（Abstract Class）</h4><p>抽象类是不能被实例化的类，它用于定义方法的模板，而子类必须实现这些方法。Python 通过 <code>abc</code> 模块中的 <code>ABC</code> 类和 <code>abstractmethod</code> 装饰器来实现抽象类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Woof!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Meow!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># animal = Animal()  # 这会抛出错误，因为抽象类不能实例化</span></span><br><span class="line">dog = Dog()</span><br><span class="line"><span class="built_in">print</span>(dog.speak())  <span class="comment"># 输出: Woof!</span></span><br></pre></td></tr></table></figure><ul><li>抽象类定义了抽象方法，子类必须实现这些抽象方法。</li><li>抽象类提供了代码结构的基础框架，具体实现由子类负责。</li></ul><h4 id="组合composition"><a class="markdownIt-Anchor" href="#组合composition"></a> 组合（Composition）</h4><p>组合是一种设计原则，通过将对象的实例作为其他类的属性来实现。这种方法允许类之间的松散耦合。相比继承，组合通常提供了更大的灵活性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Engine</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Engine started&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.engine = Engine()  <span class="comment"># 将 Engine 类实例作为 Car 的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.engine.start()</span><br><span class="line"></span><br><span class="line">car = Car()</span><br><span class="line"><span class="built_in">print</span>(car.start())  <span class="comment"># 输出: Engine started</span></span><br></pre></td></tr></table></figure><h3 id="装饰器"><a class="markdownIt-Anchor" href="#装饰器"></a> 装饰器</h3><h4 id="装饰器的定义"><a class="markdownIt-Anchor" href="#装饰器的定义"></a> 装饰器的定义</h4><p>在 Python 中，<strong>装饰器</strong>（Decorator）是一种函数，允许你在不修改原有函数代码的情况下，动态地增加或修改该函数的功能。简单来说，装饰器是用来&quot;包装&quot;其他函数的函数，它允许你在运行时增加函数的功能，通常用于日志记录、权限检查、缓存、计时等功能。</p><p>装饰器本质上是一个函数，它接受一个函数作为输入，并返回一个新的函数（通常是原函数的增强版本）。这种方式可以帮助我们在不改变原函数代码的前提下，对其进行修改或扩展。</p><p>在 Python 中，装饰器使用 <code>@decorator_name</code> 语法应用到一个函数上。这个语法等价于调用装饰器函数并将目标函数作为参数传递给它。</p><p>下面是一系列针对装饰器的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个装饰器函数decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="comment"># 我们用函数wrapper来代表被装饰后的func函数，最后返回wrapper</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;end_time - start_time&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面这段代码在wrapper函数外面包裹了一个装饰器函数decorator，</span></span><br><span class="line"><span class="comment"># 使得wrapper函数的运行时间可以被检测。(*args, **kwargs)这两个参数可以代表传入的一切参数。</span></span><br><span class="line"><span class="comment"># 我们来看看如何使用它：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先定义一个square函数：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span>  a*b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随后，使用装饰器装饰他，生成一个新的函数</span></span><br><span class="line">decorated_square = decorator(square)</span><br><span class="line"><span class="comment">#print(decorated_square(10,10))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实际上，python提供了一个更简单的方法：</span></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span>  a*b</span><br><span class="line"><span class="comment"># 这样，直接执行square(10,10)，就能输出运行的时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然，我们也可以定义一个装饰器生成器:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">threshold</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="comment"># 这是一个python中自带的装饰器，可以使得wrapper函数继承func的名字等</span></span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            start_time = time.time()</span><br><span class="line">            result = func(*args, **kwargs)</span><br><span class="line">            end_time = time.time()</span><br><span class="line">            <span class="keyword">if</span> start_time - end_time &gt; threshold:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;超时&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰这个函数</span></span><br><span class="line"><span class="meta">@timer(<span class="params"><span class="number">0.1</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep_04</span>():</span><br><span class="line">    time.sleep(<span class="number">0.4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sleep_04()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者生成一个新函数</span></span><br><span class="line">sleep_04 = timer(<span class="number">0.1</span>)(sleep_04)</span><br><span class="line"><span class="built_in">print</span>(sleep_04.__name__)</span><br></pre></td></tr></table></figure><p>装饰器概念：用来装饰其他函数的，即为其他函数添加特定功能的函数 装饰器的基本原则：</p><ol><li>不能修改被装饰函数的源码</li><li>不能修改被装饰函数的调用方式</li></ol><h4 id="类中内置装饰器"><a class="markdownIt-Anchor" href="#类中内置装饰器"></a> 类中内置装饰器</h4><p>ython 类中自带的装饰器是一些内置的、专门用于修改类行为的装饰器。这些装饰器可以帮助你更方便地实现特定的类行为或功能扩展。常见的内置类装饰器包括 <code>@staticmethod</code>、<code>@classmethod</code>、<code>@property</code> 和 <code>@abstractmethod</code> 等。</p><h5 id="staticmethod"><a class="markdownIt-Anchor" href="#staticmethod"></a> @staticmethod</h5><p><code>@staticmethod</code> 装饰器用于将一个方法声明为静态方法。静态方法属于类本身，而不是类的实例。它不需要访问类实例或类本身，因此不需要传递 <code>self</code> 或 <code>cls</code> 参数。静态方法通常用于执行一些与类本身相关的任务，但不需要访问类的属性或实例数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用静态方法</span></span><br><span class="line">result = MyClass.add(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: 5</span></span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>静态方法不依赖于类的实例化。</li><li>可以通过类名或实例来调用静态方法，但通常通过类名调用。</li><li>适用于那些不需要访问实例或类属性的方法。</li></ul><h5 id="classmethod"><a class="markdownIt-Anchor" href="#classmethod"></a> @classmethod</h5><p><code>@classmethod</code> 装饰器用于将一个方法声明为类方法。类方法第一个参数是类本身（通常命名为 <code>cls</code>），而不是实例对象。类方法通常用于访问类属性或修改类状态，而不是实例状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment_count</span>(<span class="params">cls</span>):</span><br><span class="line">        cls.count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Count: <span class="subst">&#123;cls.count&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用类方法</span></span><br><span class="line">MyClass.increment_count()  <span class="comment"># 输出: Count: 1</span></span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>类方法不需要类的实例，可以通过类本身直接调用。</li><li>类方法第一个参数是类 <code>cls</code>，而不是实例 <code>self</code>。</li><li>类方法适用于操作类级别的数据或状态。</li></ul><h5 id="property"><a class="markdownIt-Anchor" href="#property"></a> @property</h5><p><code>@property</code> 装饰器用于将一个方法定义为属性。这意味着你可以像访问属性一样访问这个方法，而无需显式调用它。<code>@property</code> 是一种将类的方法转换为只读属性的方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius</span>):</span><br><span class="line">        self._radius = radius</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">radius</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._radius</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @radius.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">radius</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Radius cannot be negative.&quot;</span>)</span><br><span class="line">        self._radius = value</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * self._radius * self._radius</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建圆对象</span></span><br><span class="line">circle = Circle(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(circle.area)  <span class="comment"># 输出: 78.5</span></span><br><span class="line">circle.radius = <span class="number">10</span>  <span class="comment"># 使用setter修改半径</span></span><br><span class="line"><span class="built_in">print</span>(circle.area)  <span class="comment"># 输出: 314.0</span></span><br></pre></td></tr></table></figure><p><strong>特点</strong></p><ul><li><code>@property</code> 使方法像属性一样访问。</li><li>可以使用 <code>@property</code> 和 <code>@property.setter</code> 来定义可读和可写的属性。</li><li>用于将计算逻辑封装成属性访问的形式。</li></ul><h5 id="abstractmethod"><a class="markdownIt-Anchor" href="#abstractmethod"></a> @abstractmethod</h5><p>详见上文</p><h3 id="魔法方法"><a class="markdownIt-Anchor" href="#魔法方法"></a> 魔法方法</h3><h4 id="重要的魔法方法"><a class="markdownIt-Anchor" href="#重要的魔法方法"></a> 重要的魔法方法</h4><p>在 Python 中，<strong>魔法方法</strong>（Magic Methods）又称为 <strong>特殊方法</strong>（Special Methods），是类中以双下划线 <code>__</code> 开头和结尾的方法。这些方法允许你对对象进行特定的操作或赋予对象特殊行为，从而让你可以定制 Python 对象的内建操作，比如加法、字符串表示、索引操作等。</p><p>魔法方法使得 Python 对象能够参与各种语言层面的操作，如算术运算、比较运算、类型转换、函数调用等，通常这些方法被 Python 内部调用，但你也可以自定义实现它们以修改对象行为。</p><p><strong><code>__new__(cls)</code></strong>：</p><ul><li>用于创建对象实例的方法。它通常与 <code>__init__</code> 一起使用，在实例化对象时首先被调用。<code>__new__</code> 返回一个新的对象实例，而 <code>__init__</code> 则用来初始化该实例。</li><li>当你继承 <code>__new__</code> 方法时，你可以控制对象创建的过程。</li></ul><p><strong><code>__init__(self, ...)</code></strong>：</p><ul><li>构造器，用于初始化对象实例。<code>__init__</code> 在 <code>__new__</code> 方法之后调用，并且在对象实例创建后立即执行。</li><li>它允许你在对象创建时设置初始属性。</li></ul><p><strong><code>__str__(self)</code></strong>：</p><ul><li>用于定义对象的字符串表示。当使用 <code>print()</code> 打印对象或使用 <code>str()</code> 函数时，<code>__str__</code> 方法被调用。</li><li>这个方法应该返回一个友好的、可读性强的字符串，用于展示对象的内容。</li></ul><p><strong><code>__getitem__(self, key)</code></strong>：</p><ul><li>用于定义对象的索引访问（例如 <code>obj[key]</code>）。<br /><strong><code>__setitem__(self, key, value)</code></strong>：</li><li>用于定义对象的索引赋值（例如 <code>obj[key] = value</code>）。<br /><strong><code>__delitem__(self, key)</code></strong>：</li><li>用于定义删除索引元素（例如 <code>del obj[key]</code>）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">return</span> self.data[index]</span><br><span class="line"></span><br><span class="line">my_list = MyList([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(my_list[<span class="number">1</span>])  <span class="comment"># 输出: 2</span></span><br></pre></td></tr></table></figure><p><strong><code>__call__(self, ...)</code></strong>：</p><ul><li>使对象成为可调用的（例如 <code>obj()</code>）。当对象像函数一样被调用时，Python 会调用 <code>obj.__call__()</code> 方法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Adder</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.value + x</span><br><span class="line"></span><br><span class="line">add_five = Adder(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(add_five(<span class="number">3</span>))  <span class="comment"># 输出: 8</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>__enter__(self)</code></strong>：<ul><li>用于定义进入 <code>with</code> 语句时的行为。</li></ul></li><li><strong><code>__exit__(self, exc_type, exc_val, exc_tb)</code></strong>：<ul><li>用于定义退出 <code>with</code> 语句时的行为，处理异常等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyContextManager</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Entering the context&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Exiting the context&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> exc_type:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Exception: <span class="subst">&#123;exc_val&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MyContextManager():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Inside the context&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="类的参数下划线前缀"><a class="markdownIt-Anchor" href="#类的参数下划线前缀"></a> 类的参数下划线前缀</h3><h4 id="单下划线-_-前缀"><a class="markdownIt-Anchor" href="#单下划线-_-前缀"></a> 单下划线 <code>_</code> 前缀</h4><p>单下划线是 Python 的一种约定，用来标识一个变量或方法是“内部使用的”，即它不应该被外部直接访问。这种标识并不影响属性或方法的访问权限，但它是对其他开发者的一种提醒，告诉他们这些属性或方法是属于类的实现细节，应该尽量避免直接使用。</p><h4 id="双下划线-__-前缀"><a class="markdownIt-Anchor" href="#双下划线-__-前缀"></a> 双下划线 <code>__</code> 前缀</h4><p>双下划线前缀通常用于表示变量或方法是类的“私有”成员。它使得这些属性或方法不会被外部直接访问，而是通过名称修饰（name mangling）进行修改，使其在外部不可直接访问。这种命名约定旨在避免类的子类或外部代码意外覆盖或访问这些“私有”成员。</p><p><strong>用途：</strong></p><ul><li>强制私有化（name mangling）——Python 在名称前加上 <code>_ClassName</code>，使得外部不容易访问这些变量或方法。</li><li>通过这种方式，Python 希望防止类的外部代码直接访问和修改这些变量，但仍然允许子类通过继承来访问和修改这些变量。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__private_value = <span class="number">100</span>  <span class="comment"># 私有属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__private_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This is a private method.&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = MyClass()</span><br><span class="line"><span class="built_in">print</span>(obj.__private_value)  <span class="comment"># 报错: AttributeError</span></span><br><span class="line">obj.__private_method()  <span class="comment"># 报错: AttributeError</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍一下Python类的装饰器和魔法方法，以及参数的下划线前缀&lt;/p&gt;</summary>
    
    
    
    <category term="编程学习-Python" scheme="https://atffang.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-Python/"/>
    
    
  </entry>
  
  <entry>
    <title>局域网访问服务器Docker下psql数据库的若干问题</title>
    <link href="https://atffang.github.io/2025/03/29/%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8Docker%E4%B8%8Bpsql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/"/>
    <id>https://atffang.github.io/2025/03/29/%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8Docker%E4%B8%8Bpsql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/</id>
    <published>2025-03-29T15:45:34.000Z</published>
    <updated>2025-03-30T01:41:37.613Z</updated>
    
    <content type="html"><![CDATA[<p>瞎捣鼓</p><span id="more"></span><p>最近有在实验室服务器的docker上部署服务的需求，将数据注入psql数据库并在docker环境中访问一切正常，然而在局域网下其他设备访问数据时，出现了一些问题，遂简单记录。</p><p>首先，由于postgresql数据库的默认端口为5432，然而docker仅仅预留了几个映射端口与外部通信，因此，需要修改psql的运行端口，这里我选择的映射端口为25002:2002。在 Docker 中，端口映射的格式通常是 host_port:container_port，即 宿主机端口:容器内端口。因此，首先需要修改psql的运行端口为2002。</p><p>找到<code>/etc/postgresql/14/main/postgresql.conf</code>配置文件，将<code>port = 5432</code>修改为制定端口，我这里为2002。</p><p>并添加：<code>listen_addresses = '*'</code>开启远程访问。</p><p>随后修改<code>/etc/postgresql/14/main/pg_hba.conf</code>来设置放行ip。设置规则为在实验室局域网下的ip全部放行，那么添加规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host    all             all             192.168.41.0/24          md5</span><br></pre></td></tr></table></figure><p>最后，重启服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/postgresql restart</span><br></pre></td></tr></table></figure><p>那么通过局域网下其他设备访问服务器的25002端口即可访问数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -h 192.168.41.56 -p 25002 -U postgres -d shanghaipoidb</span><br></pre></td></tr></table></figure><p>尝试在命令行中远程连接，并未发生什么问题，但在pgadmin中连接却提示错误为一个172.x.x.x的ip被拒绝访问，如果出现这种情况，意味着 Docker 容器内的 PostgreSQL 服务绑定的是容器的内部网络 IP（例如 <code>172.x.x.x</code>），而不是宿主机的 IP 地址（例如 <code>192.x.x.x</code>）。当你使用 pgAdmin 连接时，pgAdmin 可能尝试直接连接容器的内部 IP 地址，而不是宿主机的地址，因此连接被拒绝。只需将改ip使用上面相同的方式加入放行ip即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;瞎捣鼓&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Entropy and Cross Entropy</title>
    <link href="https://atffang.github.io/2025/03/15/Entropy%20and%20Cross%20Entropy/"/>
    <id>https://atffang.github.io/2025/03/15/Entropy%20and%20Cross%20Entropy/</id>
    <published>2025-03-15T07:50:46.000Z</published>
    <updated>2025-03-15T07:54:54.142Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍一下熵与交叉熵</p><span id="more"></span><img src="https://atffang.github.io/2025/03/15/Entropy and Cross Entropy/Entropy and Cross Entropy.png"/>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单介绍一下熵与交叉熵&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
